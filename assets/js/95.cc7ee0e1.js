(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{580:function(a,s,t){"use strict";t.r(s);var e=t(48),n=Object(e.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"spring-源码解析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-源码解析"}},[a._v("#")]),a._v(" Spring 源码解析")]),a._v(" "),t("h2",{attrs:{id:"bean-生命周期"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bean-生命周期"}},[a._v("#")]),a._v(" Bean 生命周期")]),a._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[a._v("User 类 -"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 无参构造 -"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 对象 -"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 依赖注入\n    \n    --"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" postProcessor before\n\n    -"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 初始化前（@PostConstruct）\n    -"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 初始化（实现 InitializingBean 重写 afterPropertiesSet"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("）\n    -"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 初始化后（AOP）-"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 代理对象\n\n    --"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" postProcessor after\n\n    -"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" 放入 Map（单例池）\n    -"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" Spring Bean 对象\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br")])]),t("ul",[t("li",[a._v("单例 Bean ，从 单例池（Map）中 取，如果没有重新走上述创建流程。")]),a._v(" "),t("li",[a._v("Spring 默认使用 无参构造，如果没有无参构造，只有多个有参构造的时候会报错（除非在 有参构造上添加 @Autowired），\n只有一个有参的话不会报错，并且可以省略 @Autowired。\n有参构造方法的参数首先会从 单例池（Map） 中获取。没有就去创建 -> 可能会出现循环依赖问题。")])]),a._v(" "),t("h2",{attrs:{id:"spring-事务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring-事务"}},[a._v("#")]),a._v(" Spring 事务")]),a._v(" "),t("p",[a._v("如果一个类的某个方法上添加了 @Transactional  注解，那么这个类就会产生一个代理对象，方法执行的是代理对象的方法。")]),a._v(" "),t("p",[a._v("事务管理器新建一个数据库连接 conn -> 放到 ThreadLocal 中，conn.autocommit = false,关闭自动提交后，将所有的 sql 先存在起来，如果方法不报错，那么将这些 sql 提交，否则 rollback。")]),a._v(" "),t("h3",{attrs:{id:"事务失效"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事务失效"}},[a._v("#")]),a._v(" 事务失效")]),a._v(" "),t("p",[a._v("执行的普通类，而不是代理类，导致事务失效，可以注入自身。")]),a._v(" "),t("p",[a._v("一个添加了 @Transactional 注解的方法中，调用了自身的方法，这时候，被调用的自身的那个方法，实际上是被普通对象调用的，而不是 单例池中的代理对象调用的。如果不是 Spring 管理的类，那么就不会走代理逻辑，那么注解自然就失效了。")]),a._v(" "),t("p",[a._v("@Configuration 注解类也是代理类")]),a._v(" "),t("h2",{attrs:{id:"循环依赖、三级缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#循环依赖、三级缓存"}},[a._v("#")]),a._v(" 循环依赖、三级缓存")]),a._v(" "),t("h2",{attrs:{id:"value"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#value"}},[a._v("#")]),a._v(" @Value")]),a._v(" "),t("p",[a._v("如果获取不到的话，则会把 @Value 的 key 赋值给变量。")]),a._v(" "),t("p",[a._v('@Value("#{bean_name}") 等同于 @Autowired')]),a._v(" "),t("p",[a._v("@Value 可以作用在注解上")]),a._v(" "),t("h2",{attrs:{id:"bean"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bean"}},[a._v("#")]),a._v(" @Bean")]),a._v(" "),t("p",[a._v("autowireCandidate 确认候选 Bean。")]),a._v(" "),t("p",[a._v("autowireCandidate = false 意味着该 Bean 不会作为 Bean 注入到其他 Bean。")]),a._v(" "),t("h2",{attrs:{id:"componentscan"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#componentscan"}},[a._v("#")]),a._v(" @ComponentScan")]),a._v(" "),t("p",[a._v("扫描指定路径下（以及子包）所有的带有 @Component 的类，并注册到 Spring。")]),a._v(" "),t("p",[a._v("Filter")]),a._v(" "),t("p",[a._v("ComponentScan 默认扫描指定包，也可以建立 扫描索引： 创建 resources -> META_INF -> spring.components\n文件内容：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("```\n// Key 是累的全限定路径名，Value 是注解地址\ncom.xxx.test.User=org.springframework.stereotype.Component\n```\n\n这时候只会扫描该文件进行 Bean 的注册。\n")])])]),t("h2",{attrs:{id:"conditional"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#conditional"}},[a._v("#")]),a._v(" @Conditional")]),a._v(" "),t("p",[a._v("自定义装配条件，编写一个类 "),t("code",[a._v("MyCondition implements Condition")]),a._v("，重写 matches 方法，自定义逻辑，true 就注册，false 就不会注册。")]),a._v(" "),t("h2",{attrs:{id:"lazy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#lazy"}},[a._v("#")]),a._v(" @Lazy")]),a._v(" "),t("p",[a._v("懒加载，getBean 的时候才会将 Bean 创建出来。")]),a._v(" "),t("p",[a._v("可以解决循环依赖。")]),a._v(" "),t("p",[a._v("懒加载的情况下，先赋值一个代理对象，使用的时候再去查找实际对象。")]),a._v(" "),t("h2",{attrs:{id:"resources"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#resources"}},[a._v("#")]),a._v(" @Resources")]),a._v(" "),t("p",[t("code",[a._v('@Resources(name = "beanName")')]),a._v(" 指定了 name 的话，只会按照 name 去找。")]),a._v(" "),t("p",[a._v("不指定 name 的话会先按照 name 再按照 Type 去找。")]),a._v(" "),t("h2",{attrs:{id:"configuration"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[a._v("#")]),a._v(" @Configuration")]),a._v(" "),t("p",[a._v("添加了这个注解就是 Full 配置 Bean（代理 Bean），其他方式均为 Lite Bean（普通 Bean）。")]),a._v(" "),t("h2",{attrs:{id:"import"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#import"}},[a._v("#")]),a._v(" @Import")]),a._v(" "),t("ul",[t("li",[a._v("用来导入 Bean： "),t("code",[a._v("@Import(User.class)")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);