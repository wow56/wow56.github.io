(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{470:function(s,a,t){s.exports=t.p+"assets/img/innodb-storage-structure.eeef928b.png"},471:function(s,a,t){s.exports=t.p+"assets/img/engine-compare.314c56d4.png"},472:function(s,a,t){s.exports=t.p+"assets/img/sql-execution-frequency.340fbaf6.png"},473:function(s,a,t){s.exports=t.p+"assets/img/explain.74b542c9.png"},474:function(s,a,t){s.exports=t.p+"assets/img/mysql-b+tree.2a2ec73e.png"},564:function(s,a,t){"use strict";t.r(a);var e=t(48),_=Object(e.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"mysql-进阶"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mysql-进阶"}},[s._v("#")]),s._v(" MySQL 进阶")]),s._v(" "),e("h2",{attrs:{id:"参考文档"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考文档"}},[s._v("#")]),s._v(" 参考文档")]),s._v(" "),e("p",[s._v("// TODO")]),s._v(" "),e("h2",{attrs:{id:"存储引擎"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#存储引擎"}},[s._v("#")]),s._v(" 存储引擎")]),s._v(" "),e("p",[s._v("常见搜索引擎有 InnoDB(5.5 之后默认)、MyIsam、Memory...")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("建表时，指定存储引擎")]),s._v(" "),e("div",{staticClass:"language-sql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sql"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CREATE")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("TABLE")]),s._v(" 表名 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n    字段"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" 字段"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("类型 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COMMENT")]),s._v(" 注释"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("，\n    字段"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" 字段"),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("类型 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COMMENT")]),s._v(" 注释"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ENGINE")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INNODB")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("COMMENT")]),s._v(" 表注释"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])])]),s._v(" "),e("li",[e("p",[s._v("查看当前数据库支持的所有搜索引擎 "),e("code",[s._v("SHOW ENGINES;")])])])]),s._v(" "),e("h3",{attrs:{id:"innodb"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#innodb"}},[s._v("#")]),s._v(" InnoDB")]),s._v(" "),e("p",[s._v("MySQL 5.5 之后的默认存储引擎。")]),s._v(" "),e("p",[s._v("特点：")]),s._v(" "),e("ul",[e("li",[s._v("支持事务，DML 操作遵循 ACID 模型。")]),s._v(" "),e("li",[s._v("行级锁，提高并发访问性能。")]),s._v(" "),e("li",[s._v("支持外键 "),e("code",[s._v("FOREIGN KEY")]),s._v("。")])]),s._v(" "),e("p",[s._v("文件："),e("code",[s._v("xxx.ibd")]),s._v("：xxx 是表名，InnoDB 引擎的每张表都会对应这样一个表空间文件，存放该表的表结构（frm、sdi）、数据和索引。")]),s._v(" "),e("p",[e("code",[s._v("idb2sdi xxx.ibd")])]),s._v(" "),e("h4",{attrs:{id:"逻辑存储结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#逻辑存储结构"}},[s._v("#")]),s._v(" 逻辑存储结构")]),s._v(" "),e("ul",[e("li",[s._v("表空间 "),e("code",[s._v("TableSpace")]),s._v("(.idb 文件)")]),s._v(" "),e("li",[s._v("段 "),e("code",[s._v("Segment")])]),s._v(" "),e("li",[s._v("区 "),e("code",[s._v("Extent")])]),s._v(" "),e("li",[s._v("页 "),e("code",[s._v("Page")])]),s._v(" "),e("li",[s._v("行 "),e("code",[s._v("Row")])])]),s._v(" "),e("p",[e("img",{attrs:{src:t(470),alt:"InnoDB 存储结构"}})]),s._v(" "),e("h4",{attrs:{id:"innodb主键索引树高度"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#innodb主键索引树高度"}},[s._v("#")]),s._v(" InnoDB主键索引树高度")]),s._v(" "),e("blockquote",[e("p",[s._v("可以先去看索引原理中的树结构图。")])]),s._v(" "),e("p",[s._v("InnoDB 指针占用 6 字节，一页大小固定为 16k，如果主键使用 bigint 类型（8 字节），一行数据假设为 1k，一页最多就可以存储 16 条数据，则：")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("若高度为 2：")]),s._v(" "),e("p",[e("code",[s._v("n*8 + (n+1)*6 = 16*1024")]),s._v(" (一页大小)，n 为 key 数，可得 "),e("code",[s._v("n = 1171")]),s._v("，那么一页最多存储 1171 Key（page），"),e("code",[s._v("1171*16（每一页数据量）=18736")]),s._v("，可知，高度为 2，最多存放 18736 条数据。")])]),s._v(" "),e("li",[e("p",[s._v("若高度为 3：")]),s._v(" "),e("p",[e("code",[s._v("1171 * 1171 * 16 = 21939856")]),s._v("，大概可以存放 2000w 左右数据。")])])]),s._v(" "),e("h3",{attrs:{id:"myisam"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#myisam"}},[s._v("#")]),s._v(" MyISAM")]),s._v(" "),e("p",[s._v("MySQL 老版的默认存储引擎。")]),s._v(" "),e("p",[s._v("特点：")]),s._v(" "),e("ul",[e("li",[s._v("表锁。")]),s._v(" "),e("li",[s._v("访问速度快。")])]),s._v(" "),e("p",[s._v("文件："),e("code",[s._v(".MYD")]),s._v("（data）、"),e("code",[s._v(".MYI")]),s._v("(index) 和 "),e("code",[s._v(".sdi")]),s._v("（表结构）。")]),s._v(" "),e("h3",{attrs:{id:"memory"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#memory"}},[s._v("#")]),s._v(" Memory")]),s._v(" "),e("p",[s._v("Memory 引擎的表数据是存储在内存中的，所以只用做临时表或缓存。")]),s._v(" "),e("p",[s._v("特点：")]),s._v(" "),e("ul",[e("li",[s._v("hash 索引（default）。")]),s._v(" "),e("li",[s._v("访问速度极快。")])]),s._v(" "),e("p",[s._v("文件："),e("code",[s._v("xxx.sdi")]),s._v("，存储表结构信息。")]),s._v(" "),e("h3",{attrs:{id:"常见引擎对比"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常见引擎对比"}},[s._v("#")]),s._v(" 常见引擎对比")]),s._v(" "),e("p",[e("img",{attrs:{src:t(471),alt:"常见引擎对比"}})]),s._v(" "),e("h2",{attrs:{id:"索引"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#索引"}},[s._v("#")]),s._v(" 索引")]),s._v(" "),e("p",[s._v("MySQL 的索引共有以下几类：")]),s._v(" "),e("ul",[e("li",[s._v("主键索引 "),e("code",[s._v("PRIMARY")])]),s._v(" "),e("li",[s._v("唯一索引 "),e("code",[s._v("UNIQUE")])]),s._v(" "),e("li",[s._v("普通索引")]),s._v(" "),e("li",[s._v("全文索引 "),e("code",[s._v("FULLTEXT")]),s._v(" "),e("ul",[e("li",[s._v("全文索引搜索的是文本中的关键词，不是比较索引中的值。")])])])]),s._v(" "),e("p",[s._v("相关语法：")]),s._v(" "),e("ul",[e("li",[s._v("查看索引 "),e("code",[s._v("SHOW INDEX FROM table_name;")])]),s._v(" "),e("li",[s._v("创建索引 "),e("code",[s._v("CREATE [UNIQUE | FULLTEXT] INDEX index_name ON table_name (field1_name, ...);")])]),s._v(" "),e("li",[s._v("删除索引 "),e("code",[s._v("DROP INDEX index_name ON table_name;")])])]),s._v(" "),e("h3",{attrs:{id:"最左前缀原则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#最左前缀原则"}},[s._v("#")]),s._v(" 最左前缀原则")]),s._v(" "),e("blockquote",[e("p",[s._v("最左前缀原则，或最左匹配原则，最左前缀匹配原则 指的是同一个东西。")])]),s._v(" "),e("p",[s._v("数据库索引分为单键索引和复合索引，单键索引的命中无需多说。最左前缀原则是指在复合索引中的命中规则。")]),s._v(" "),e("p",[s._v("假如有一个索引 "),e("code",[s._v("a_1_b_1_c_1")]),s._v("，当查询 a、a+b、a+b+c 都可以命中该索引，但是 b、b+c、c 就不能命中索引。")]),s._v(" "),e("p",[s._v("另外，a+c 也会命中索引，它会从所有 a 相同的数据中查询等于 c 的数据。")]),s._v(" "),e("h4",{attrs:{id:"范围查询"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#范围查询"}},[s._v("#")]),s._v(" 范围查询")]),s._v(" "),e("p",[s._v("在复合索引中，如果出现范围查询（"),e("code",[s._v(">")]),s._v(","),e("code",[s._v("<")]),s._v("），范围查询右侧列索引失效。这时候建议使用 "),e("code",[s._v(">=")]),s._v(" or "),e("code",[s._v("<=")]),s._v("。")]),s._v(" "),e("h3",{attrs:{id:"索引失效场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#索引失效场景"}},[s._v("#")]),s._v(" 索引失效场景")]),s._v(" "),e("ul",[e("li",[s._v("优化器认为全表扫描更快。")]),s._v(" "),e("li",[s._v("字符串类型字段使用时，没有加 "),e("code",[s._v("''")]),s._v("，索引会失效。")]),s._v(" "),e("li",[s._v("头部模糊匹配（尾部模糊不会失效），索引失效。")]),s._v(" "),e("li",[e("code",[s._v("or")]),s._v(" 连接的两侧字段都要有对应索引，否则索引失效。")]),s._v(" "),e("li",[s._v("在索引列进行运算时，索引会失效。")])]),s._v(" "),e("h3",{attrs:{id:"sql-提示"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sql-提示"}},[s._v("#")]),s._v(" SQL 提示")]),s._v(" "),e("ul",[e("li",[s._v("use index "),e("code",[s._v("explain select * from table_name use index(index_name) where x = y")]),s._v(" // 建议")]),s._v(" "),e("li",[s._v("ignore index "),e("code",[s._v("explain select * from table_name ignore index(index_name) where x = y")])]),s._v(" "),e("li",[s._v("force index "),e("code",[s._v("explain select * from table_name force index(index_name) where x = y")])])]),s._v(" "),e("h3",{attrs:{id:"覆盖索引"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#覆盖索引"}},[s._v("#")]),s._v(" 覆盖索引")]),s._v(" "),e("blockquote",[e("p",[s._v("回表，联合索引涉及到的字段并没有完全包含所要查询的字段，这时候就需要先在辅助索引（联合索引）中查找主数据的 id，然后拿 id 去聚簇索引中查找辅助索引中不存在的字段值。")]),s._v(" "),e("p",[s._v("要想更好的了解回表，需要先了解 InnoDB 的"),e("a",{attrs:{href:"#%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95"}},[s._v("聚簇索引")]),s._v("和辅助索引的概念。")])]),s._v(" "),e("p",[s._v("尽量使用覆盖索引，即查询返回的列在该索引中都可以找到，减少使用 "),e("code",[s._v("SELECT *")]),s._v("，本质是减少回表操作。")]),s._v(" "),e("h3",{attrs:{id:"前缀索引"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前缀索引"}},[s._v("#")]),s._v(" 前缀索引")]),s._v(" "),e("blockquote",[e("p",[s._v("当某个字段类型是字符串（"),e("code",[s._v("varchar")]),s._v("、"),e("code",[s._v("text")]),s._v(" 等）时，如果这个字段中存放的字符串长度很大，被索引时，索引也就变的很大，查询时，就会浪费大量的磁盘 IO，进而影响查询效率。这时，可以取字符串的一部分前缀作为索引，这样就可以很大程度的解约索引空间，从而提高索引效率。")])]),s._v(" "),e("p",[s._v("语法："),e("code",[s._v("CREATE INDEX index_name ON table_name(field_name(n))")]),s._v(" // n 代表截取值的前 n 位")]),s._v(" "),e("p",[s._v("在评估 n 的取值时，可以根据索引的选择性来判断。")]),s._v(" "),e("p",[s._v("选择性：一列中数据去重后/这一列总数 = 选择性。例如：")]),s._v(" "),e("ul",[e("li",[e("code",[s._v("select count(distinct email) / count(*) from user;")])]),s._v(" "),e("li",[e("code",[s._v("select count(distinct substring(email,1,5)) / count(*) from user;")]),s._v(" // 取 email 的前 5 位后的选择性值")])]),s._v(" "),e("h2",{attrs:{id:"性能分析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#性能分析"}},[s._v("#")]),s._v(" 性能分析")]),s._v(" "),e("h3",{attrs:{id:"sql-执行频率"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sql-执行频率"}},[s._v("#")]),s._v(" SQL 执行频率")]),s._v(" "),e("p",[s._v("通过执行频率可以判断某个数据库重点是以增删改查中哪类操作为主，来判断是否需要进行优化。")]),s._v(" "),e("p",[s._v("语法："),e("code",[s._v("SHOW GLOBAL/SESSION STATUS LIKE 'Com_______'")]),s._v(" // 7 个下划线")]),s._v(" "),e("p",[e("img",{attrs:{src:t(472),alt:"sql execution frequency"}})]),s._v(" "),e("h3",{attrs:{id:"慢查询日志"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#慢查询日志"}},[s._v("#")]),s._v(" 慢查询日志")]),s._v(" "),e("ul",[e("li",[s._v("查看慢查询日志配置 "),e("code",[s._v("show variables likes 'slow_query_log';")])])]),s._v(" "),e("p",[s._v("MySQL 慢查询日志默认关闭，需要在配置文件（"),e("code",[s._v("/etc/my.cnf")]),s._v("）中配置：")]),s._v(" "),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 开启")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("slow_query_log")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 配置慢查询日志阈值，这里是超过 2s 会被记录，默认为 10s")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("long_query_time")]),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("日志默认存放位置 "),e("code",[s._v("/var/lib/mysql/localhost-slow.log")])]),s._v(" "),e("h3",{attrs:{id:"profile"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#profile"}},[s._v("#")]),s._v(" profile")]),s._v(" "),e("blockquote",[e("p",[s._v("使用前通过 "),e("code",[s._v("have_profiling")]),s._v(" 参数查看当前数据库是否支持 profile，"),e("code",[s._v("SELECT @@have_profiling")]),s._v("。")])]),s._v(" "),e("ul",[e("li",[s._v("通过 "),e("code",[s._v("SELECT @@profiling")]),s._v(" 查看是否开启。")]),s._v(" "),e("li",[s._v("MySQL 的 profile 默认是关闭的，可以通过 "),e("code",[s._v("SET profiling = 1;")]),s._v(" 来开启 profiling。")])]),s._v(" "),e("p",[s._v("查看详情：")]),s._v(" "),e("ul",[e("li",[s._v("通过 "),e("code",[s._v("show profiles")]),s._v(" 可以在优化 SQL 时，看到时间具体的耗费详情。")]),s._v(" "),e("li",[s._v("查看某一条 query 的具体时间消耗详情 "),e("code",[s._v("show profile for query query_id;")]),s._v("。")]),s._v(" "),e("li",[s._v("查看某一条 query 的 SQL 语句的 CPU 使用情况 "),e("code",[s._v("show profile cpu for query query_id;")]),s._v("。")])]),s._v(" "),e("h3",{attrs:{id:"explain-执行计划"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#explain-执行计划"}},[s._v("#")]),s._v(" explain 执行计划")]),s._v(" "),e("p",[s._v("直接在查询语句前面加上 "),e("code",[s._v("EXPLAIN")]),s._v(" 或 "),e("code",[s._v("DESC")]),s._v(" 就可以查看该 query 对应的执行计划分析了，例如：")]),s._v(" "),e("p",[e("code",[s._v("explain SELECT * from user;")])]),s._v(" "),e("p",[e("img",{attrs:{src:t(473),alt:"explain 示例"}})]),s._v(" "),e("h4",{attrs:{id:"explain-各字段含义"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#explain-各字段含义"}},[s._v("#")]),s._v(" explain 各字段含义")]),s._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[s._v("点开查看")]),s._v(" "),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# explain 执行计划各字段含义")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# id")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("#")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# select 查询的序列号，表示查询中执行 select 子句或者是操作表的顺序（id 相同，执行顺序从上到下；id 不同，值越大，越先执行），如果是多个表查询，结果就会有多行，这时候可以通过这一行判断多张表的执行顺序。")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# select_type")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 表示 SELECT 的类型，常见取值有 SIMPLE（简单表，即不使用表连接或子查询）、PRIMARY（主查询，即外层查询）、UNION（UNION 中的第二个或者后面的查询语句）、SUBQUERY（SELECT/WHERE 之后包含了子查询）等。")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# type")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 表示连接类型，性能由好到坏依次为：NULL、system、const、eq_ref、ref、range、index、all。")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# possible_key")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 显示这张表上可能用到的 索引，一个或多个。")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# key")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 实际使用的索引，如果为 NULL，表示没有用到索引")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# key_len")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的情况下，长度越短越好。")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# rows")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# MySQL 认为必须要执行查询的行数，在 innoDB 表中，这是个估计值，并不太准确。")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# filtered")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 表示返回结果的行数占需读取行数的百分比，值越大越好。")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Extra ")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br")])])]),s._v(" "),e("h2",{attrs:{id:"sql-优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sql-优化"}},[s._v("#")]),s._v(" SQL 优化")]),s._v(" "),e("h3",{attrs:{id:"插入数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#插入数据"}},[s._v("#")]),s._v(" 插入数据")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("多条 insert 可以改成 insert 批量插入。")])]),s._v(" "),e("li",[e("p",[s._v("手动提交事务，可以所有数据插入完成再提交事务（默认每条 SQL 自动提交事务）。")])]),s._v(" "),e("li",[e("p",[s._v("主键按照顺序插入。")])]),s._v(" "),e("li",[e("p",[s._v("大批量的插入数据可以使用 load 加载 CSV 文件的数据。")]),s._v(" "),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 连接客户端时，使用 --local-infile 参数")]),s._v("\nmysql --local-infile -u root -p\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 开启从本地加载文件导入数据的开关，设置全局参数 local_infile = 1;")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" global local_infile "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# load 命令加载文件数据")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# fields terminated by ',' 指定字段的分隔符")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# lines terminaterd by '\\n' 指定行分隔符")]),s._v("\nload data "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("local")]),s._v(" infile "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/home/sql1.log'")]),s._v(" into table table_name fields terminated by "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("','")]),s._v(" lines terminaterd by "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\\n'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br")])])])]),s._v(" "),e("h3",{attrs:{id:"主键优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#主键优化"}},[s._v("#")]),s._v(" 主键优化")]),s._v(" "),e("ul",[e("li",[s._v("主键需要顺序插入\n"),e("ul",[e("li",[s._v("如果乱序可能会发生页分裂")])])]),s._v(" "),e("li",[s._v("尽量降低主键长度，因为主键数据也是会占用空间的。")])]),s._v(" "),e("p",[s._v("页分裂、页合并现象。判断阈值默认为 50%")]),s._v(" "),e("h3",{attrs:{id:"orderby-优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#orderby-优化"}},[s._v("#")]),s._v(" orderBy 优化")]),s._v(" "),e("ul",[e("li",[e("code",[s._v("using filesort")]),s._v("，通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区 sort buffer 中完成操作，所有不是通过索引直接返回排序结果的都是 filesort 排序。")]),s._v(" "),e("li",[e("code",[s._v("using index")]),s._v("，通过有序索引顺序扫描直接返回有序数据，不需要额外排序，操作效率高。")])]),s._v(" "),e("p",[s._v("大数量排序可以适当增大排序缓冲区大小："),e("code",[s._v("sort_buffer_size")]),s._v("（默认 256kb）")]),s._v(" "),e("h3",{attrs:{id:"groupby-优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#groupby-优化"}},[s._v("#")]),s._v(" groupBy 优化")]),s._v(" "),e("p",[s._v("索引对于 group by 的影响。尽量使用索引覆盖要操作的字段。")]),s._v(" "),e("h3",{attrs:{id:"limit-优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#limit-优化"}},[s._v("#")]),s._v(" limit 优化")]),s._v(" "),e("p",[e("code",[s._v("select * from user limit 50000,10")]),s._v(" 大分页问题。")]),s._v(" "),e("p",[s._v("主键索引+子查询方式优化 "),e("code",[s._v("select u.* from user u, (select id from user limit 50000,10) t where u.id = t.id;")]),s._v("，将子查询看做临时表，然后联查。")]),s._v(" "),e("h3",{attrs:{id:"count-优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#count-优化"}},[s._v("#")]),s._v(" count 优化")]),s._v(" "),e("p",[e("code",[s._v("select count(*) from user")])]),s._v(" "),e("ul",[e("li",[e("code",[s._v("count(主键)")]),s._v("，InnoDB 遍历整张表，把每行的 id 取出来，然后累加。")]),s._v(" "),e("li",[e("code",[s._v("count(字段)")]),s._v("，先判断该字段是否有 not null 约束，来判断直接累加还是去判断每行是否为 null 再累加。这里只会统计不为 NULL 的数据个数。")]),s._v(" "),e("li",[e("code",[s._v("count(1)")]),s._v("，遍历整张表，不取值，每遍历一行数据，返回一个 1，最后将累加。注意这里是加返回数字的个数，并不是累加返回的数字1，这里 0 和 1 的结果一样的。")]),s._v(" "),e("li",[e("code",[s._v("count(*)")]),s._v("，InnoDB 不取值，直接按行累加。")])]),s._v(" "),e("p",[s._v("效率由高到低："),e("code",[s._v("count(*)")]),s._v(" ≈ "),e("code",[s._v("count(1)")]),s._v(" > "),e("code",[s._v("count(主键)")]),s._v(" > "),e("code",[s._v("count(字段)")])]),s._v(" "),e("h3",{attrs:{id:"update-优化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#update-优化"}},[s._v("#")]),s._v(" update 优化")]),s._v(" "),e("p",[s._v("update 更新数据时，要根据 索引字段 作为条件，这样的话，InnoDB 会加 行锁。但是如果不加索引，行锁会升级为表锁，这时其他的 update 操作会阻塞。")]),s._v(" "),e("ul",[e("li",[e("code",[s._v('update user set name = "xiaoming" where id = 1')]),s._v(" // 这里只会锁住 id = 1 这行数据")]),s._v(" "),e("li",[e("code",[s._v('update user set name = "xiaoming" where age = 18')]),s._v(" // 如果 age 没有索引，是表锁，age 有索引，只会是行锁")])]),s._v(" "),e("h2",{attrs:{id:"索引原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#索引原理"}},[s._v("#")]),s._v(" 索引原理")]),s._v(" "),e("p",[s._v("索引就是帮助快速搜索数据的一种数据结构，每种搜索引擎的实现都不太一样，主要常见的索引有以下几种：")]),s._v(" "),e("ul",[e("li",[e("code",[s._v("B+Tree 索引")]),s._v("，最常用的索引实现方式，大部分引擎都支持。")]),s._v(" "),e("li",[e("code",[s._v("Hash 索引")]),s._v("，通过哈希表实现，只有精确匹配索引列的时候有效，不支持范围查询。")]),s._v(" "),e("li",[e("code",[s._v("Full-text 全文索引")]),s._v("，是一种通过建立倒排索引，快速匹配文档的方式。例如 "),e("code",[s._v("Lucene")]),s._v("、"),e("code",[s._v("Solr")]),s._v("、"),e("code",[s._v("Elasticsearch")]),s._v("(基于 Lucene)")]),s._v(" "),e("li",[s._v("...")])]),s._v(" "),e("table",[e("thead",[e("tr",[e("th",[s._v("索引类型")]),s._v(" "),e("th",[s._v("InnoDB")]),s._v(" "),e("th",[s._v("MyISAM")]),s._v(" "),e("th",[s._v("Memory")])])]),s._v(" "),e("tbody",[e("tr",[e("td",[s._v("B+Tree")]),s._v(" "),e("td",[s._v("Y")]),s._v(" "),e("td",[s._v("Y")]),s._v(" "),e("td",[s._v("Y")])]),s._v(" "),e("tr",[e("td",[s._v("Hash")]),s._v(" "),e("td",[s._v("-")]),s._v(" "),e("td",[s._v("-")]),s._v(" "),e("td",[s._v("Y")])]),s._v(" "),e("tr",[e("td",[s._v("Full-text")]),s._v(" "),e("td",[s._v("5.6 以后支持")]),s._v(" "),e("td",[s._v("Y")]),s._v(" "),e("td",[s._v("-")])])])]),s._v(" "),e("blockquote",[e("p",[s._v("MySQL 的索引使用 "),e("RouterLink",{attrs:{to:"/computer-literacy/data-structure/data_structure.html#btree"}},[s._v("B+Tree")]),s._v(" 原理，在 B+Tree 基础上改进了一些。")],1)]),s._v(" "),e("p",[e("img",{attrs:{src:t(474),alt:"MySQL 索引原理"}})]),s._v(" "),e("h3",{attrs:{id:"聚簇索引"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#聚簇索引"}},[s._v("#")]),s._v(" 聚簇索引")]),s._v(" "),e("p",[s._v("InnoDB 的索引分为两类，聚簇索引和辅助索引（二级索引）。")]),s._v(" "),e("p",[s._v("从 B+Tree 的原理中可以看出 InnoDB 中索引是和数据在一起的，但实际上并不是所有的索引都和数据存放在一起（硬盘中）。InnoDB 的表数据中只有主键索引，其他索引单独存在（不包含数据）。当一张表被创建时，InnoDB 会选择设置的主键那一列作为主键索引来组织数据，如果没有设置主键索引，那么它会选择一列它认为值唯一的一列作为主键索引来组织数据，如果没有这样的一列数据，那它会自己生成一列唯一数据隐藏起来追加在表的最后一列作为主键来组织数据。")]),s._v(" "),e("p",[s._v("除了主键索引外的所有索引都是辅助索引，也叫二级索引。辅助索引的 B+Tree 的叶子结点中存放的是数据的主键值，聚簇索引中的叶子结点存放的是原数据（row）。")]),s._v(" "),e("p",[s._v("聚簇索引是 InnoDB 中的概念，在 MyIsam 中，数据（在硬盘中）和索引是分别存放的，MyIsam 的索引叶子结点存放的都是主键值。")]),s._v(" "),e("h2",{attrs:{id:"存储对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#存储对象"}},[s._v("#")]),s._v(" 存储对象")]),s._v(" "),e("h3",{attrs:{id:"视图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#视图"}},[s._v("#")]),s._v(" 视图")]),s._v(" "),e("h4",{attrs:{id:"创建视图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建视图"}},[s._v("#")]),s._v(" 创建视图")]),s._v(" "),e("p",[s._v("语法："),e("code",[s._v("CREATE [OR REPLACE] VIEW 视图名称 AS SELECT 语句 [WITH [CASCADED | LOCAL] CHECK OPTION]")])]),s._v(" "),e("p",[s._v("例如 "),e("code",[s._v("create or replace view user_view as select id, name from user where age > 10;")])]),s._v(" "),e("p",[e("strong",[s._v("检查选项")])]),s._v(" "),e("p",[s._v("在对视图进行增删改查的时候，实际操作的是 基表。")]),s._v(" "),e("p",[s._v("假如一个视图是这么创建的 "),e("code",[s._v("create view user_view as select id, name from user where age > 10;")]),s._v("，在对视图的数据进行操作的时候，如果你执行了 "),e("code",[s._v('insert into user_view values(5, "Daming", 12)')]),s._v("，插入一个 12 岁的数据，显然不符合视图的限制。但是这里却能插入成功，只是在视图中不显示。如果想要限制插入不符合视图的数据，可以这样创建视图 "),e("code",[s._v("create view user_view as select id, name from user where age > 10 with check option;")]),s._v("，这时候再插入 12 岁的数据就会直接报错。")]),s._v(" "),e("p",[s._v("这里的参数 "),e("code",[s._v("with check option")]),s._v(" 等同于 "),e("code",[s._v("with cascaded check option")]),s._v("，cascaded 是默认值。另外还有一个值 local，即 "),e("code",[s._v("with local check option")]),s._v("。")]),s._v(" "),e("p",[s._v("因为视图是可以基于另一个视图去创建的，当视图 2 的条件和视图 1 的条件不一样的时候，使用 "),e("code",[s._v("with cascaded check option")]),s._v(" 可以在插入数据的时候，检查视图 2 的同时也会去检查是否满足视图 1。如果视图 3 又基于视图 2 创建，但是没有添加 "),e("code",[s._v("with check option")]),s._v(" 参数，那么插入的时候，不会检查当前视图 3 的条件，但是会向上检查。")]),s._v(" "),e("h4",{attrs:{id:"查询视图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查询视图"}},[s._v("#")]),s._v(" 查询视图")]),s._v(" "),e("p",[s._v("查看创建视图语句："),e("code",[s._v("SHOW CREATE VIEW 视图名称")]),s._v("，查询数据的话，和查询表数据是一样的。")]),s._v(" "),e("h4",{attrs:{id:"修改视图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#修改视图"}},[s._v("#")]),s._v(" 修改视图")]),s._v(" "),e("p",[s._v("两种方式：")]),s._v(" "),e("ul",[e("li",[e("code",[s._v("CREATE OR REPLACE VIEW 视图名称 AS SELECT 语句")]),s._v("  // 利用了 OR REPLACE 参数")]),s._v(" "),e("li",[e("code",[s._v("ALTER VIEW 视图名称 AS SELECT 语句")])])]),s._v(" "),e("h4",{attrs:{id:"删除视图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除视图"}},[s._v("#")]),s._v(" 删除视图")]),s._v(" "),e("p",[e("code",[s._v("DROP VIEW [IF EXISTS] 视图名称")])]),s._v(" "),e("h3",{attrs:{id:"存储过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#存储过程"}},[s._v("#")]),s._v(" 存储过程")]),s._v(" "),e("p",[s._v("// TODO")]),s._v(" "),e("h3",{attrs:{id:"存储函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#存储函数"}},[s._v("#")]),s._v(" 存储函数")]),s._v(" "),e("p",[s._v("// TODO")]),s._v(" "),e("h3",{attrs:{id:"触发器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#触发器"}},[s._v("#")]),s._v(" 触发器")]),s._v(" "),e("p",[s._v("// TODO")]),s._v(" "),e("h2",{attrs:{id:"锁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#锁"}},[s._v("#")]),s._v(" 锁")]),s._v(" "),e("h3",{attrs:{id:"全局锁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#全局锁"}},[s._v("#")]),s._v(" 全局锁")]),s._v(" "),e("blockquote",[e("p",[s._v("锁定数据库中的所有表")])]),s._v(" "),e("p",[s._v("使用场景：全库数据备份中使用全局锁，对所有表锁定，为了获取一致性视图，保证数据的完整性。")]),s._v(" "),e("p",[e("code",[s._v("flush tables with read lock;")]),s._v(" 加锁 -> "),e("code",[s._v("mysqldump -uroot -p12345 user > user.sql")]),s._v(" 导出数据 -> "),e("code",[s._v("unlock tables;")]),s._v(" 释放锁")]),s._v(" "),e("p",[s._v("可以使用 "),e("code",[s._v("--single-transaction")]),s._v(" 参数实现不加锁的一致性数据备份："),e("code",[s._v("mysqldump --single-transaction -uroot -p12345 user > user.sql")])]),s._v(" "),e("h3",{attrs:{id:"表级锁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#表级锁"}},[s._v("#")]),s._v(" 表级锁")]),s._v(" "),e("blockquote",[e("p",[s._v("锁住整张表")])]),s._v(" "),e("p",[s._v("表级锁主要分为 3 类：表锁、元数据锁（meta data lock）和意向锁。")]),s._v(" "),e("h4",{attrs:{id:"表锁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#表锁"}},[s._v("#")]),s._v(" 表锁")]),s._v(" "),e("p",[s._v("表锁分为：")]),s._v(" "),e("ul",[e("li",[s._v("表共享读锁（read lock），加锁后，当前客户端和其他客户端都只能读，不能写。")]),s._v(" "),e("li",[s._v("表独占写锁（write lock），加锁后，当前客户端可读可写，其他客户端不可读写。")])]),s._v(" "),e("p",[s._v("语法：")]),s._v(" "),e("ul",[e("li",[s._v("加锁，"),e("code",[s._v("lock tables 表名... read/write")])]),s._v(" "),e("li",[s._v("释放锁，"),e("code",[s._v("unlock tables / 客户端断开链接")])])]),s._v(" "),e("h4",{attrs:{id:"元数据锁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#元数据锁"}},[s._v("#")]),s._v(" 元数据锁")]),s._v(" "),e("blockquote",[e("p",[s._v("元数据锁，meta data lock，即 MDL。MYSQL 5.5 引入。")])]),s._v(" "),e("p",[s._v("MDL 加锁过程是系统自动控制，无需显示使用，在访问一张表的时候会自动加上。MDL 锁主要作用是维护表元数据的数据一致性，在表上有活动事务的时候，不可以对元数据进行写入操作。")]),s._v(" "),e("p",[s._v("当对一张表进行增删改查的时候，加 MDL 读锁（共享）；当对表结构进行变更操作的时候，加 MDL 写锁（排他）。")]),s._v(" "),e("h3",{attrs:{id:"行级锁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#行级锁"}},[s._v("#")]),s._v(" 行级锁")]),s._v(" "),e("blockquote",[e("p",[s._v("锁住单行数据")])]),s._v(" "),e("h2",{attrs:{id:"innodb-详解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#innodb-详解"}},[s._v("#")]),s._v(" InnoDB 详解")]),s._v(" "),e("h2",{attrs:{id:"讨论区"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#讨论区"}},[s._v("#")]),s._v(" 讨论区")]),s._v(" "),e("blockquote",[e("p",[s._v("由于评论过多会影响页面最下方的导航，故将评论区做默认折叠处理。")])]),s._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[s._v("点击查看评论区内容，渴望您的宝贵建议~")]),s._v(" "),e("Vssue",{attrs:{title:s.$title,options:{locale:"zh"}}})],1)])}),[],!1,null,null,null);a.default=_.exports}}]);