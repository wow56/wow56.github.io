(window.webpackJsonp=window.webpackJsonp||[]).push([[122],{612:function(t,a,e){"use strict";e.r(a);var r=e(48),s=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"effective-java"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#effective-java"}},[t._v("#")]),t._v(" Effective Java")]),t._v(" "),e("h2",{attrs:{id:"参考文档"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考文档"}},[t._v("#")]),t._v(" 参考文档")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://jiapengcai.gitbooks.io/effective-java/content/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Effective Java 第三版中文（1-39）"),e("OutboundLink")],1)])]),t._v(" "),e("h2",{attrs:{id:"简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),e("p",[t._v("全书除第一章引言外，一共 90 条内容，简单分为十一个章节。")]),t._v(" "),e("h2",{attrs:{id:"创建和销毁对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建和销毁对象"}},[t._v("#")]),t._v(" 创建和销毁对象")]),t._v(" "),e("p",[t._v("该章节有以下几条：")]),t._v(" "),e("ol",[e("li",[t._v("用静态工厂方法代替构造器")]),t._v(" "),e("li",[t._v("遇到多个构造器参数时要考虑使用构建器")]),t._v(" "),e("li",[t._v("用私有构造器或枚举类型强化 Singleton 属性")]),t._v(" "),e("li",[t._v("通过私有构造器强化不可实例化的能力")]),t._v(" "),e("li",[t._v("优先考虑依赖注入来引用资源")]),t._v(" "),e("li",[t._v("避免创建不必要的对象")]),t._v(" "),e("li",[t._v("消除过期的对象引用")]),t._v(" "),e("li",[t._v("避免使用终结方法和清楚方法")]),t._v(" "),e("li",[t._v("try-with-resources 优先于 try-finally")])]),t._v(" "),e("h3",{attrs:{id:"_1-用静态工厂方法代替构造器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-用静态工厂方法代替构造器"}},[t._v("#")]),t._v(" 1. 用静态工厂方法代替构造器")]),t._v(" "),e("ul",[e("li",[t._v("（1）静态工厂有名称。")]),t._v(" "),e("li",[t._v("（2）不必在每次调用的时候，都创建一个新的对象。\n即单例。")]),t._v(" "),e("li",[t._v("（3）")])]),t._v(" "),e("h3",{attrs:{id:"_9-try-with-resources-优先于-try-finally"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-try-with-resources-优先于-try-finally"}},[t._v("#")]),t._v(" 9. try-with-resources 优先于 try-finally")]),t._v(" "),e("p",[t._v("Java 中有很多使用后需要手动关闭的资源，比如：InputStream、OutStream 等。")]),t._v(" "),e("p",[t._v("当使用这些资源的时候，往往会使用这种方式：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("```java\nFileOutputStream fileOutputStream = new FileOutputStream(dst);\ntry {\n    fileOutputStream.write(...);\n} finally {\n    fileOutputStream.close();\n}\n```\n")])])]),e("p",[t._v("这种方式就算碰到异常情况也可以正常关闭资源，但是如果有多个需要关闭的资源，这种方式写起来就会很臃肿，比如：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("```java\nFileOutputStream fileOutputStream = new FileOutputStream(dst);\ntry {\n    FileOutputStream fO = new FileOutputStream(dst);\n    try {\n        fileOutputStream.write(...);\n        fO.write(...);\n    } finally {\n        fileOutputStream.close();\n    }\n} finally {\n    fO.close();\n}\n```\n")])])]),e("p",[t._v("如果使用 "),e("code",[t._v("try-with-resources")]),t._v(" 的话，只需要：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[t._v("```java\ntry (FileOutputStream fO = new FileOutputStream(dst)) {\n    fO.write(...);\n}\n\n--- 多个资源的话使用 `;` 进行分割。\n\ntry (\n    FileOutputStream fO = new FileOutputStream(dst);\n    FileOutputStream fO = new FileOutputStream(dst)\n) {\n    fO.write(...);\n}\n// 注意只有中间加 ； 分隔，末尾不加。\n```\n")])])]),e("p",[e("strong",[t._v("注意:")]),t._v(" 能够使用 "),e("code",[t._v("try-with-resources")]),t._v(" 进行处理的资源需要实现 "),e("code",[t._v("AutoCloseable")]),t._v(" 接口。")]),t._v(" "),e("h2",{attrs:{id:"对于所有对象都通用的方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#对于所有对象都通用的方法"}},[t._v("#")]),t._v(" 对于所有对象都通用的方法")]),t._v(" "),e("p",[t._v("该章节有以下几条：")]),t._v(" "),e("ol",{attrs:{start:"10"}},[e("li",[t._v("覆盖 equals 时请遵守通用约定")]),t._v(" "),e("li",[t._v("覆盖 equals 时总要覆盖 hashCode")]),t._v(" "),e("li",[t._v("始终要覆盖 toString")]),t._v(" "),e("li",[t._v("谨慎地覆盖 clone")]),t._v(" "),e("li",[t._v("考虑实现 Comparable 接口")])]),t._v(" "),e("h2",{attrs:{id:"类和接口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类和接口"}},[t._v("#")]),t._v(" 类和接口")]),t._v(" "),e("ol",{attrs:{start:"15"}},[e("li",[t._v("使类和成员的可访问性最小化")]),t._v(" "),e("li",[t._v("要在公有类而非公有域中使用访问方法")]),t._v(" "),e("li",[t._v("使可变性最小化")]),t._v(" "),e("li",[t._v("复合优先于继承")]),t._v(" "),e("li",[t._v("要么设计继承并提供文档说明，要么禁止继承")])]),t._v(" "),e("h2",{attrs:{id:"泛型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#泛型"}},[t._v("#")]),t._v(" 泛型")]),t._v(" "),e("ol",{attrs:{start:"20"}},[e("li",[t._v("接口优于抽象类")]),t._v(" "),e("li",[t._v("为后代设计接口")]),t._v(" "),e("li",[t._v("接口只用于定义类型")]),t._v(" "),e("li",[t._v("类层次优于标签类")]),t._v(" "),e("li",[t._v("静态成员类优于非静态成员类")]),t._v(" "),e("li",[t._v("限制源文件为单个顶级类")])]),t._v(" "),e("h2",{attrs:{id:"枚举和注解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#枚举和注解"}},[t._v("#")]),t._v(" 枚举和注解")]),t._v(" "),e("h2",{attrs:{id:"lambda-和-stream"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lambda-和-stream"}},[t._v("#")]),t._v(" Lambda 和 Stream")]),t._v(" "),e("h2",{attrs:{id:"方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[t._v("#")]),t._v(" 方法")]),t._v(" "),e("h2",{attrs:{id:"通用编程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#通用编程"}},[t._v("#")]),t._v(" 通用编程")]),t._v(" "),e("h2",{attrs:{id:"异常"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#异常"}},[t._v("#")]),t._v(" 异常")]),t._v(" "),e("h2",{attrs:{id:"并发"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#并发"}},[t._v("#")]),t._v(" 并发")]),t._v(" "),e("h2",{attrs:{id:"序列化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#序列化"}},[t._v("#")]),t._v(" 序列化")]),t._v(" "),e("h2",{attrs:{id:"讨论区"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#讨论区"}},[t._v("#")]),t._v(" 讨论区")]),t._v(" "),e("blockquote",[e("p",[t._v("由于评论过多会影响页面最下方的导航，故将评论区做默认折叠处理。")])]),t._v(" "),e("details",{staticClass:"custom-block details"},[e("summary",[t._v("点击查看评论区内容，渴望您的宝贵建议~")]),t._v(" "),e("Vssue",{attrs:{title:t.$title,options:{locale:"zh"}}})],1)])}),[],!1,null,null,null);a.default=s.exports}}]);