(window.webpackJsonp=window.webpackJsonp||[]).push([[106],{595:function(a,s,t){"use strict";t.r(s);var n=t(48),e=Object(n.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"java-8-feature"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-8-feature"}},[a._v("#")]),a._v(" Java 8 Feature")]),a._v(" "),t("h2",{attrs:{id:"参考文档"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考文档"}},[a._v("#")]),a._v(" 参考文档")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://www.oracle.com/java/technologies/javase/8-whats-new.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("What's New in JDK 8 官网"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"https://www.runoob.com/java/java8-new-features.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Java 8 新特性 菜鸟"),t("OutboundLink")],1)])]),a._v(" "),t("h2",{attrs:{id:"主要特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#主要特性"}},[a._v("#")]),a._v(" 主要特性")]),a._v(" "),t("ul",[t("li",[a._v("Lambda 表达式\n"),t("ul",[t("li",[a._v("Lambda 允许把函数作为一个方法的参数（函数作为参数传递到方法中）。")])])]),a._v(" "),t("li",[a._v("方法引用\n"),t("ul",[t("li",[a._v("方法引用提供了非常有用的语法，可以直接引用已有 Java 类或对象（实例）的方法或构造器。与 Lambda 联合使用，方法引用可以使语言的构造更紧凑简洁，减少冗余代码。")])])]),a._v(" "),t("li",[a._v("函数式接口")]),a._v(" "),t("li",[a._v("接口默认方法\n"),t("ul",[t("li",[a._v("默认方法就是一个在接口里面有了一个实现的方法。")])])]),a._v(" "),t("li",[a._v("Stream API\n"),t("ul",[t("li",[a._v("新添加的 Stream API（java.util.stream）把真正的函数式编程风格引入到 Java 中。")])])]),a._v(" "),t("li",[a._v("Optional 类\n"),t("ul",[t("li",[a._v("Optional 类已经成为 Java 8 类库的一部分，用来解决空指针异常。")])])]),a._v(" "),t("li",[a._v("Date Time API\n"),t("ul",[t("li",[a._v("加强对日期与时间的处理。")])])]),a._v(" "),t("li",[a._v("Base64\n"),t("ul",[t("li",[a._v("在 Java 8 中，Base64 编码已经成为 Java 类库的标准。")])])]),a._v(" "),t("li",[a._v("新工具\n"),t("ul",[t("li",[a._v("新的编译工具，如：\n"),t("ul",[t("li",[a._v("Nashorn 引擎 jjs")]),a._v(" "),t("li",[a._v("类依赖分析器 jdeps")])])])])]),a._v(" "),t("li",[a._v("Nashorn，JavaScript 引擎\n"),t("ul",[t("li",[a._v("Java 8 提供了一个新的 Nashorn javascript 引擎，它允许我们在 JVM 上运行特定的 javascript 应用。")])])])]),a._v(" "),t("h2",{attrs:{id:"lambda"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#lambda"}},[a._v("#")]),a._v(" Lambda")]),a._v(" "),t("p",[a._v("Lambda 表达式，也可称为闭包，它是推动 Java 8 发布的最重要新特性。Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。使用 Lambda 表达式可以使代码变的更加简洁紧凑。")]),a._v(" "),t("p",[a._v("目的：替代匿名类。")]),a._v(" "),t("p",[a._v("格式：(x,y) -> {x+y}")]),a._v(" "),t("p",[a._v("示例：")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 1. 不需要参数,返回值为 5")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 2. 接收一个参数(数字类型),返回其2倍的值")]),a._v("\nx "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" x\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 3. 接受2个参数(数字),并返回他们的差值")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" x – y\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 4. 接收2个int型整数,返回他们的和")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" y\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 5. 接受一个 string 对象,并在控制台打印,不返回任何值(看起来像是返回void)")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("s"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br")])]),t("h3",{attrs:{id:"变量作用域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量作用域"}},[a._v("#")]),a._v(" 变量作用域")]),a._v(" "),t("p",[a._v("Lambda 表达式只能引用标记了 final 的外层局部变量，这就是说不能在 Lambda 内部修改定义在域外的局部变量，否则会编译错误。")]),a._v(" "),t("p",[a._v("Lambda 表达式的局部变量可以不用声明为 final，但是必须不可被后面的代码修改（即隐性的具有 final 的语义）。")]),a._v(" "),t("p",[a._v("在 Lambda 表达式当中不允许声明一个与局部变量同名的参数或者局部变量。")]),a._v(" "),t("h2",{attrs:{id:"方法引用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法引用"}},[a._v("#")]),a._v(" 方法引用")]),a._v(" "),t("p",[a._v("方法引用可以使语言的构造更紧凑简洁，减少冗余代码。")]),a._v(" "),t("p",[a._v("格式：使用 "),t("code",[a._v("::")])]),a._v(" "),t("p",[a._v("在 Lambda 表达式中使用，可以直接传入方法签名一样的方法，即除了方法名以外，方法参数，返回值都一致。")]),a._v(" "),t("p",[a._v("示例：")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 以数组中的字符串为 userName 创建 User")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("List")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" strings "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Arrays")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("asList")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"one"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"two"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"three"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"four"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"five"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 不使用方法引用")]),a._v("\nstrings"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("stream")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("map")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("User")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("forEach")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 方法引用写法")]),a._v("\nstrings"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("stream")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("map")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("User")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("forEach")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 这里是 new User() 构造方法需要一个参数 String userName，")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 那么这里 .map(User::new) 等同于 .map(x -> new User(x))")]),a._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 这里也可以传入其他方法，只要方法签名一样就可以。")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br")])]),t("ul",[t("li",[t("p",[a._v("构造器引用："),t("em",[a._v("它的语法是 "),t("code",[a._v("Class::new")]),a._v("，或者更一般的 "),t("code",[a._v("Class< T >::new")])])]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Car")]),a._v(" car "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Car")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("create")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Car")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("List")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Car")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" cars "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Arrays")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("asList")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v(" car "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])])]),a._v(" "),t("li",[t("p",[a._v("静态方法引用："),t("em",[a._v("它的语法是 "),t("code",[a._v("Class::static_method")])])]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[a._v("cars"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("forEach")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Car")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("collide")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])])]),a._v(" "),t("li",[t("p",[a._v("特定类的任意对象的方法引用："),t("em",[a._v("它的语法是 "),t("code",[a._v("Class::method")])])]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[a._v("cars"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("forEach")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Car")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("repair")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])])]),a._v(" "),t("li",[t("p",[a._v("特定对象的方法引用："),t("em",[a._v("它的语法是 "),t("code",[a._v("instance::method")])])]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Car")]),a._v(" police "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Car")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("create")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Car")]),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\ncars"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("forEach")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v(" police"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("follow")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br")])])])]),a._v(" "),t("h2",{attrs:{id:"函数式接口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数式接口"}},[a._v("#")]),a._v(" 函数式接口")]),a._v(" "),t("p",[a._v("函数式接口(Functional Interface)就是一个有且仅有一个抽象方法，但是可以有多个非抽象方法的接口。")]),a._v(" "),t("p",[a._v("函数式接口可以被隐式转换为 Lambda 表达式。")]),a._v(" "),t("p",[a._v("JDK 1.8 之前已有的函数式接口：")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("java.lang.Runnable")])]),a._v(" "),t("li",[t("code",[a._v("java.util.concurrent.Callable")])]),a._v(" "),t("li",[t("code",[a._v("java.util.Comparator")])]),a._v(" "),t("li",[t("code",[a._v("java.io.FileFilter")])]),a._v(" "),t("li",[t("code",[a._v("java.security.PrivilegedAction")])]),a._v(" "),t("li",[t("code",[a._v("java.nio.file.PathMatcher")])]),a._v(" "),t("li",[t("code",[a._v("java.lang.reflect.InvocationHandler")])]),a._v(" "),t("li",[t("code",[a._v("java.beans.PropertyChangeListener")])]),a._v(" "),t("li",[t("code",[a._v("java.awt.event.ActionListener")])]),a._v(" "),t("li",[t("code",[a._v("javax.swing.event.ChangeListener")])])]),a._v(" "),t("p",[a._v("JDK 1.8 新增的函数接口："),t("code",[a._v("java.util.function")]),a._v(" 包常用接口")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("Supplier<T>")]),a._v(" - "),t("em",[a._v("0 入参 1 返回")])]),a._v(" "),t("li",[t("code",[a._v("Consumer<T>")]),a._v(" - "),t("em",[a._v("1 入参 0 返回")])]),a._v(" "),t("li",[t("code",[a._v("Function<T,R>")]),a._v(" - "),t("em",[a._v("1 入参 1 返回")])]),a._v(" "),t("li",[t("code",[a._v("Predicate<T>")]),a._v(" - "),t("em",[a._v("1 入参 1 boolean 返回")])]),a._v(" "),t("li",[t("code",[a._v("BiConsumer<T,U>")]),a._v(" - "),t("em",[a._v("2 入参 0 返回")])]),a._v(" "),t("li",[t("code",[a._v("BiFunction<T,U,R>")]),a._v(" - "),t("em",[a._v("2 入参 1 返回")])]),a._v(" "),t("li",[a._v("其它类似...")])]),a._v(" "),t("h2",{attrs:{id:"接口默认方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#接口默认方法"}},[a._v("#")]),a._v(" 接口默认方法")]),a._v(" "),t("p",[a._v("Java 8 允许接口使用 "),t("code",[a._v("default")]),a._v(" 关键字实现默认方法。")]),a._v(" "),t("p",[a._v("Java 8 接口可以声明并实现静态方法。")]),a._v(" "),t("h2",{attrs:{id:"stream-api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#stream-api"}},[a._v("#")]),a._v(" Stream API")]),a._v(" "),t("p",[a._v("Stream 分为 "),t("code",[a._v("stream() 串行流")]),a._v(" 和 "),t("code",[a._v("parallelStream 并行流")]),a._v("。")]),a._v(" "),t("p",[a._v("Stream 不调用终止方法，中间操作（map、filter...）不会执行。使用 Stream.collect() 将流收集到数组、列表等集合中去。")]),a._v(" "),t("p",[a._v("示例：")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Stream")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" stringStream "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Stream")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("of")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"h"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"e"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"l"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"l"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"o"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("List")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(">")])]),a._v(" l "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" stringStream"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("filter")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("c "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("->")]),a._v(" c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("equals")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"l"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("collect")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Collectors")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("toList")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nl"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("forEach")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("::")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("h3",{attrs:{id:"获取-stream-方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#获取-stream-方式"}},[a._v("#")]),a._v(" 获取 Stream 方式")]),a._v(" "),t("ul",[t("li",[a._v("Stream.of()")]),a._v(" "),t("li",[a._v("Collection/Arrays.stream()")])]),a._v(" "),t("h3",{attrs:{id:"中间方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#中间方法"}},[a._v("#")]),a._v(" 中间方法")]),a._v(" "),t("ul",[t("li",[a._v("forEach")]),a._v(" "),t("li",[a._v("map")]),a._v(" "),t("li",[a._v("flatMap")]),a._v(" "),t("li",[a._v("filter")]),a._v(" "),t("li",[a._v("sorted")]),a._v(" "),t("li",[a._v("limit")]),a._v(" "),t("li",[a._v("collect")])]),a._v(" "),t("h2",{attrs:{id:"optional-类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#optional-类"}},[a._v("#")]),a._v(" Optional 类")]),a._v(" "),t("p",[a._v("Optional 类的引入很好的解决空指针异常。")]),a._v(" "),t("p",[a._v("Optional 类是一个可以为 "),t("code",[a._v("null")]),a._v(" 的容器对象。如果值存在则 "),t("code",[a._v("isPresent()")]),a._v(" 方法会返回 "),t("code",[a._v("true")]),a._v("，调用 "),t("code",[a._v("get()")]),a._v(" 方法会返回该对象。")]),a._v(" "),t("p",[a._v("Optional 是个容器：它可以保存类型 "),t("code",[a._v("T")]),a._v(" 的值，或者仅仅保存 "),t("code",[a._v("null")]),a._v("。")]),a._v(" "),t("p",[a._v("Optional 提供很多有用的方法，这样我们就不用显式进行空值检测:")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("get()")])]),a._v(" "),t("li",[t("code",[a._v("void ifPresent(Consumer<? super T> consumer)")])]),a._v(" "),t("li",[t("code",[a._v("<U>Optional<U> map(Function<? super T,? extends U> mapper)")])]),a._v(" "),t("li",[t("code",[a._v("static <T> Optional<T> of(T value)")])]),a._v(" "),t("li",[t("code",[a._v("static <T> Optional<T> of(T value)")])]),a._v(" "),t("li",[t("code",[a._v("T orElse(T other)")])]),a._v(" "),t("li",[t("code",[a._v("T orElseGet(Supplier<? extends T> other)")])]),a._v(" "),t("li",[t("code",[a._v("<X extends Throwable> T orElseThrow(Supplier<? extends X> exceptionSupplier)")])]),a._v(" "),t("li",[a._v("...")])]),a._v(" "),t("h2",{attrs:{id:"date-time-api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#date-time-api"}},[a._v("#")]),a._v(" Date Time API")]),a._v(" "),t("p",[t("a",{attrs:{href:"../java/Java#api"}},[a._v("新旧 Time lib")])]),a._v(" "),t("h2",{attrs:{id:"base64"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#base64"}},[a._v("#")]),a._v(" Base64")]),a._v(" "),t("p",[a._v("在 Java 8 中，Base64 编码已经成为了 Java 类库的标准，Java 8 内置了 Base64 的编/解码器。")]),a._v(" "),t("p",[a._v("Base64 提供了")]),a._v(" "),t("h2",{attrs:{id:"todo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#todo"}},[a._v("#")]),a._v(" TODO")]),a._v(" "),t("h2",{attrs:{id:"讨论区"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#讨论区"}},[a._v("#")]),a._v(" 讨论区")]),a._v(" "),t("blockquote",[t("p",[a._v("由于评论过多会影响页面最下方的导航，故将评论区做默认折叠处理。")])]),a._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[a._v("点击查看评论区内容，渴望您的宝贵建议~")]),a._v(" "),t("Vssue",{attrs:{title:a.$title,options:{locale:"zh"}}})],1)])}),[],!1,null,null,null);s.default=e.exports}}]);