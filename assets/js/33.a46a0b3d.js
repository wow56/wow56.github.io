(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{504:function(s,a,t){"use strict";t.r(a);var e=t(48),r=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"docker-基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-基础"}},[s._v("#")]),s._v(" Docker 基础")]),s._v(" "),t("h2",{attrs:{id:"参考文档"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考文档"}},[s._v("#")]),s._v(" 参考文档")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://docs.docker.com/manuals/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Docker Docs"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://www.runoob.com/docker/docker-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Docker 菜鸟"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("a",{attrs:{href:"https://yeasy.gitbook.io/docker_practice/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Docker 从入门到实践"),t("OutboundLink")],1)])]),s._v(" "),t("h2",{attrs:{id:"ci-cd"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ci-cd"}},[s._v("#")]),s._v(" CI/CD")]),s._v(" "),t("ul",[t("li",[s._v("continuous integration，持续集成")]),s._v(" "),t("li",[s._v("continuous delivery，持续交付")]),s._v(" "),t("li",[s._v("continuous deployment，持续部署")])]),s._v(" "),t("h2",{attrs:{id:"起步"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#起步"}},[s._v("#")]),s._v(" 起步")]),s._v(" "),t("h3",{attrs:{id:"安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[s._v("#")]),s._v(" 安装")]),s._v(" "),t("blockquote",[t("p",[s._v("本处使用的是 Ubuntu 20.04 进行安装。\n因为 Ubuntu 20.04 官方 apt 源中就有 Docker，所以可以直接通过 apt 命令来安装:")])]),s._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[s._v("WARNING")]),s._v(" "),t("p",[s._v("切勿在没有配置 Docker APT 源的情况下直接使用 apt 命令安装 Docker.")])]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt")]),s._v(" update\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" docker.io\ndocker --version\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("安装成功以后，执行 "),t("code",[s._v("docker container run hello-world")]),s._v(" 来检查是否已经成功。")]),s._v(" "),t("p",[s._v("如果本地没有该镜像，这个命令将会下载测试镜像，在容器中运行它，打印出 "),t("code",[s._v('"Hello from Docker"')]),s._v("，并且退出。")]),s._v(" "),t("h3",{attrs:{id:"配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[s._v("#")]),s._v(" 配置")]),s._v(" "),t("h4",{attrs:{id:"docker-用户组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-用户组"}},[s._v("#")]),s._v(" docker 用户组")]),s._v(" "),t("p",[s._v("安装成功后，执行 docker 命令（比如 "),t("code",[s._v("docker ps -a")]),s._v("），会显示 "),t("code",[s._v("connect: permission denied")]),s._v("。")]),s._v(" "),t("p",[s._v("这是因为在默认情况下，普通用户没有权限执行 docker 相关操作，虽然可以每次加 "),t("code",[s._v("sudo")]),s._v(" 执行，但是过于麻烦。可以将普通用户加入到 docker 用户组，并退出 shell 重新登录（以便用户组会员信息刷新），就可以不使用 sudo 来运行 docker 相关操作了。")]),s._v(" "),t("p",[s._v("操作如下：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# $USER 是一个环境变量，代表当前用户名。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加当前用户到 group docker 中。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("usermod")]),s._v(" -aG docker "),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$USER")]),s._v("\ndocker info\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[t("code",[s._v("usermod")]),s._v(" 可用来修改用户帐号的各项设定：")]),s._v(" "),t("ul",[t("li",[s._v("-a 在 -G 存在的情况下，增加次要用户组的支持，不是修改当前用户组。\n"),t("ul",[t("li",[s._v("-G 修改当前次要组")]),s._v(" "),t("li",[s._v("-aG 是增加新的次要组")])])]),s._v(" "),t("li",[s._v("-G <群组> 修改用户所属的附加群组。")]),s._v(" "),t("li",[s._v("-g <群组> 修改用户所属的群组。")]),s._v(" "),t("li",[s._v("-c <备注> 修改用户帐号的备注文字。")]),s._v(" "),t("li",[s._v("-d <登入目录> 修改用户登入时的目录。")]),s._v(" "),t("li",[s._v("-e <有效期限> 修改帐号的有效期限。")]),s._v(" "),t("li",[s._v("-f <缓冲天数> 修改在密码过期后多少天即关闭该帐号。")]),s._v(" "),t("li",[s._v("-l <帐号名称> 修改用户帐号名称。")]),s._v(" "),t("li",[s._v("-L 锁定用户密码，使密码无效。")]),s._v(" "),t("li",[s._v("-s "),t("code",[s._v("<shell>")]),s._v(" 修改用户登入后所使用的shell。")]),s._v(" "),t("li",[s._v("-u "),t("code",[s._v("<uid>")]),s._v(" 修改用户ID。")]),s._v(" "),t("li",[s._v("-U 解除密码锁定。")])]),s._v(" "),t("p",[t("code",[s._v("docker info")]),s._v(": 显示 Docker 系统信息，包括镜像和容器数。")]),s._v(" "),t("h4",{attrs:{id:"配置国内源"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置国内源"}},[s._v("#")]),s._v(" 配置国内源")]),s._v(" "),t("p",[s._v("由于 docker 默认镜像仓库在海外，所以需要配置国内源来加快镜像拉取速度。")]),s._v(" "),t("p",[s._v("修改 "),t("code",[s._v("/etc/docker/daemon.json")]),s._v(" (如果该文件不存在，手动创建即可)。文件内容如下：")]),s._v(" "),t("div",{staticClass:"language-json line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"registry-mirrors"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://hub-mirror.c.163.com"')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h3",{attrs:{id:"卸载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#卸载"}},[s._v("#")]),s._v(" 卸载")]),s._v(" "),t("p",[s._v("在卸载 Docker 之前，最好移除所有的容器，镜像，卷和网络。")]),s._v(" "),t("p",[s._v("运行下面的命令停止所有正在运行的容器，并且移除所有的 docker 对象：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("docker container stop "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("docker container "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" -aq"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\ndocker system prune -a --volumes\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("现在你可以使用 apt 像卸载其他软件包一样来卸载 Docker：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt")]),s._v(" purge docker-ce\n"),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt")]),s._v(" autoremove\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h2",{attrs:{id:"docker-简介"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-简介"}},[s._v("#")]),s._v(" Docker 简介")]),s._v(" "),t("blockquote",[t("p",[s._v("Docker 是一个开源的应用容器引擎，基于 Go 语言，并遵从 Apache2.0 协议开源。")]),s._v(" "),t("p",[s._v("Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。")]),s._v(" "),t("p",[s._v("容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。")])]),s._v(" "),t("p",[t("strong",[s._v("理论介绍先忽略，这里在网上曾看到一个十分通俗易懂的说法：")])]),s._v(" "),t("p",[s._v("电脑装系统的时候，需要一张盘，我们称其为镜像。镜像是一个固定的文件，这次读盘和下次读盘内容是一样的。\n但有些开发者会把这个镜像安装到电脑上，再在这个电脑上删删改改，再重新打包一个镜像刻盘，固化出一个镜像来，这就是镜像打包。\n比如说国内以前泛滥的盗版XP系统，从微软官方镜像出发，添加小工具，系统设置修改优化，加主题，造出番茄花园，雨林木风，深度之类的盗版安装碟。")]),s._v(" "),t("p",[t("code",[s._v("镜像 => 修改打包 => 镜像 => 修改打包 => 镜像")])]),s._v(" "),t("p",[s._v("镜像装到电脑后，这个电脑就是个容器，里面包含使用者的数据和设置。从玩盗版系统到玩 Docker，区别只是电脑从实体变成虚拟机罢了。")]),s._v(" "),t("p",[s._v("Docker 上虚拟机被设计得很廉价，一台物理机上可以开很多虚拟机。廉价到可以为每一个软件专开一个虚拟机，像银行的 ATM 机器，虽是 Windows 系统的电脑，但终其一生只跑一个程序只显示一个界面。虚拟机的廉价，加上镜像里又打包好了所需的软件，导致了大家想装某个软件的时候，可以直接开个新虚拟机，然后找这个软件的 Docker 镜像，啪一下装上去跑起来。比起把软件往一个现成系统上装，要省事千倍，尤其是装那些需要编译，系统内核兼容，各种库依赖，缺少帮助文档的开源软件。")]),s._v(" "),t("p",[s._v("所以 Docker 流行了起来。")]),s._v(" "),t("h3",{attrs:{id:"三个基本概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三个基本概念"}},[s._v("#")]),s._v(" 三个基本概念")]),s._v(" "),t("ul",[t("li",[s._v("镜像（Image）：Docker 镜像，\n"),t("ul",[t("li",[s._v("相当于是一个 root 文件系统。")]),s._v(" "),t("li",[s._v("比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。")])])]),s._v(" "),t("li",[s._v("容器（container）：\n"),t("ul",[t("li",[s._v("镜像和容器的关系，就像是类和实例的关系一样。")]),s._v(" "),t("li",[s._v("镜像是静态的定义，容器就像是镜像运行时的实体。")]),s._v(" "),t("li",[s._v("容器可以创建、启动、停止、删除、暂停等。")])])]),s._v(" "),t("li",[s._v("仓库（Repository）：\n"),t("ul",[t("li",[s._v("仓库可以看成是一个代码控制中心，用来保存镜像。")])])])]),s._v(" "),t("h3",{attrs:{id:"status-容器状态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#status-容器状态"}},[s._v("#")]),s._v(" STATUS 容器状态")]),s._v(" "),t("p",[s._v("状态有7种：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("created")]),s._v("（已创建）")]),s._v(" "),t("li",[t("code",[s._v("restarting")]),s._v("（重启中）")]),s._v(" "),t("li",[t("code",[s._v("running")]),s._v(" 或 "),t("code",[s._v("Up")]),s._v("（运行中）")]),s._v(" "),t("li",[t("code",[s._v("removing")]),s._v("（迁移中）")]),s._v(" "),t("li",[t("code",[s._v("paused")]),s._v("（暂停）")]),s._v(" "),t("li",[t("code",[s._v("exited")]),s._v("（停止）")]),s._v(" "),t("li",[t("code",[s._v("dead")]),s._v("（死亡）")])]),s._v(" "),t("h2",{attrs:{id:"常用命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[s._v("#")]),s._v(" 常用命令")]),s._v(" "),t("ul",[t("li",[s._v("直接输入 "),t("code",[s._v("docker")]),s._v(" 命令来查看到 Docker 客户端的所有命令选项。")]),s._v(" "),t("li",[s._v("通过命令 "),t("code",[s._v("docker command --help")]),s._v(" 更深入的了解指定的 Docker 命令使用方法。")]),s._v(" "),t("li",[t("code",[s._v("docker info")])]),s._v(" "),t("li",[t("code",[s._v("docker stats")]),s._v("，查看资源占用情况。")])]),s._v(" "),t("h2",{attrs:{id:"运行一个-web-应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运行一个-web-应用"}},[s._v("#")]),s._v(" 运行一个 WEB 应用")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("docker pull training/webapp")]),s._v(" # 载入镜像")]),s._v(" "),t("li",[t("code",[s._v("docker run -d -P training/webapp python app.py")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("-d")]),s._v("：让容器在后台运行。")]),s._v(" "),t("li",[t("code",[s._v("-P")]),s._v("：将容器内部使用的网络端口随机映射到我们使用的主机上。")])])]),s._v(" "),t("li",[s._v("也可以通过 "),t("code",[s._v("-p")]),s._v(" 参数来设置不一样的端口：\n"),t("ul",[t("li",[t("code",[s._v("docker run -d -p 5000:5000 training/webapp python app.py")])])])])]),s._v(" "),t("h3",{attrs:{id:"查看网络端口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看网络端口"}},[s._v("#")]),s._v(" 查看网络端口")]),s._v(" "),t("ol",[t("li",[t("code",[s._v("docker ps")])]),s._v(" "),t("li",[t("code",[s._v("docker <容器 ID 或者 容器 name>")])])]),s._v(" "),t("h3",{attrs:{id:"查看-web-应用程序日志"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看-web-应用程序日志"}},[s._v("#")]),s._v(" 查看 WEB 应用程序日志")]),s._v(" "),t("p",[t("code",[s._v("docker logs [ID 或者名字]")]),s._v("，可以查看容器内部的标准输出。")]),s._v(" "),t("p",[s._v("例如 "),t("code",[s._v("docker logs -f bf08b7f2cd89")])]),s._v(" "),t("ul",[t("li",[t("code",[s._v("-f")]),s._v(" "),t("ul",[t("li",[s._v("让 "),t("code",[s._v("docker logs")]),s._v(" 像使用 "),t("code",[s._v("tail -f")]),s._v(" 一样来输出容器内部的标准输出。")])])]),s._v(" "),t("li",[t("code",[s._v("-t")]),s._v("，显示时间戳")])]),s._v(" "),t("h3",{attrs:{id:"查看容器内的进程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看容器内的进程"}},[s._v("#")]),s._v(" 查看容器内的进程")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("docker top [name / id]")])])]),s._v(" "),t("h3",{attrs:{id:"检查-web-应用程序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#检查-web-应用程序"}},[s._v("#")]),s._v(" 检查 WEB 应用程序")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("docker inspect [name / id]")]),s._v("，检查 Docker 的底层信息。")]),s._v(" "),t("li",[s._v("它会返回一个 JSON 文件记录着 Docker 容器的配置和状态信息。")])]),s._v(" "),t("h3",{attrs:{id:"停止-重启-web-应用容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#停止-重启-web-应用容器"}},[s._v("#")]),s._v(" 停止 / 重启 WEB 应用容器")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("docker stop [name / id]")])]),s._v(" "),t("li",[t("code",[s._v("docker restart [name / id]")])])]),s._v(" "),t("h3",{attrs:{id:"移除-web-应用容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#移除-web-应用容器"}},[s._v("#")]),s._v(" 移除 WEB 应用容器")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("docker rm [name / id]")])]),s._v(" "),t("li",[s._v("删除容器时，容器的状态必须是停止状态。")])]),s._v(" "),t("h2",{attrs:{id:"容器的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#容器的使用"}},[s._v("#")]),s._v(" 容器的使用")]),s._v(" "),t("h3",{attrs:{id:"获取镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#获取镜像"}},[s._v("#")]),s._v(" 获取镜像")]),s._v(" "),t("p",[s._v("因为容器是镜像的示例，想要使用容器，那么首先你要先有一个镜像。如果我们本地没有 ubuntu 镜像，我们可以使用 "),t("code",[s._v("docker pull")]),s._v(" 命令来载入 ubuntu 镜像：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("docker pull ubuntu")])])]),s._v(" "),t("h3",{attrs:{id:"启动-停止容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#启动-停止容器"}},[s._v("#")]),s._v(" 启动/停止容器")]),s._v(" "),t("h4",{attrs:{id:"启动一个容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#启动一个容器"}},[s._v("#")]),s._v(" 启动一个容器")]),s._v(" "),t("p",[s._v("以下命令使用 ubuntu 镜像启动一个容器，参数为以命令行模式进入该容器：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("docker run -it ubuntu /bin/bash")])]),s._v(" "),t("li",[s._v("参数说明：\n"),t("ul",[t("li",[s._v("-i: 交互式操作。")]),s._v(" "),t("li",[s._v("-t: 终端。")]),s._v(" "),t("li",[s._v("ubuntu: ubuntu 镜像。")]),s._v(" "),t("li",[t("code",[s._v("/bin/bash")]),s._v("：放在镜像名后的是命令，该命令会在容器启动后立即执行。\n"),t("ul",[t("li",[s._v("这里我们希望有个交互式 Shell，因此用的是 "),t("code",[s._v("/bin/bash")]),s._v("。")])])])])])]),s._v(" "),t("p",[s._v("要退出终端，直接输入 "),t("code",[s._v("exit")]),s._v("。")]),s._v(" "),t("h4",{attrs:{id:"启动已停止运行的容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#启动已停止运行的容器"}},[s._v("#")]),s._v(" 启动已停止运行的容器")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("docker ps")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("docker ps -a")]),s._v("，查看所有容器。")])])]),s._v(" "),t("li",[s._v("启动一个已停止的容器，"),t("code",[s._v("docker start")]),s._v("。")])]),s._v(" "),t("h4",{attrs:{id:"后台运行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#后台运行"}},[s._v("#")]),s._v(" 后台运行")]),s._v(" "),t("p",[s._v("在大部分的场景下，我们希望 docker 的服务是在后台运行的，我们可以过 "),t("code",[s._v("-d")]),s._v(" 指定容器的运行模式。")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("docker run -itd --name ubuntu-test ubuntu /bin/bash")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("-d")]),s._v(" 参数默认不会进入容器。")])])])]),s._v(" "),t("h4",{attrs:{id:"停止-重启容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#停止-重启容器"}},[s._v("#")]),s._v(" 停止/重启容器")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("docker stop <容器 ID>")]),s._v("，停止")]),s._v(" "),t("li",[t("code",[s._v("docker restart <容器 ID>")]),s._v("，重启")])]),s._v(" "),t("h3",{attrs:{id:"进入容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#进入容器"}},[s._v("#")]),s._v(" 进入容器")]),s._v(" "),t("p",[s._v("在使用 -d 参数时，容器启动后会进入后台。此时想要进入容器，可以通过以下指令进入：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("docker attach")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("docker attach 1e560fca3906")])])])]),s._v(" "),t("li",[t("code",[s._v("docker exec")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("docker exec -it 243c32535da7 /bin/bash")])])])]),s._v(" "),t("li",[s._v("推荐使用 "),t("code",[s._v("docker exec")]),s._v(" 命令，因为这个退出容器终端，不会导致容器的停止。")])]),s._v(" "),t("h3",{attrs:{id:"删除容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#删除容器"}},[s._v("#")]),s._v(" 删除容器")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("docker rm ID")])]),s._v(" "),t("li",[t("code",[s._v("docker container prune")]),s._v("，清理掉所有处于终止状态的容器。")])]),s._v(" "),t("h3",{attrs:{id:"导出和导入容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#导出和导入容器"}},[s._v("#")]),s._v(" 导出和导入容器")]),s._v(" "),t("h4",{attrs:{id:"导出"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#导出"}},[s._v("#")]),s._v(" 导出")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("docker export")]),s._v(" 命令，导出本地某个容器。\n"),t("ul",[t("li",[t("code",[s._v("docker export 1e560fca3906 > ubuntu.tar")])]),s._v(" "),t("li",[s._v("导出容器 1e560fca3906 快照到本地文件 ubuntu.tar。")])])])]),s._v(" "),t("h4",{attrs:{id:"导入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#导入"}},[s._v("#")]),s._v(" 导入")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("docker import")]),s._v(" 从容器快照文件中再导入为镜像。\n"),t("ul",[t("li",[t("code",[s._v("cat docker/ubuntu.tar | docker import - test/ubuntu:v1")])]),s._v(" "),t("li",[s._v("将快照文件 ubuntu.tar 导入到镜像 test/ubuntu:v1")])])])]),s._v(" "),t("h4",{attrs:{id:"指定-url-进行导入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#指定-url-进行导入"}},[s._v("#")]),s._v(" 指定 url 进行导入")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("docker import http://example.com/exampleimage.tgz example/imagerepo")])])]),s._v(" "),t("h2",{attrs:{id:"镜像的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#镜像的使用"}},[s._v("#")]),s._v(" 镜像的使用")]),s._v(" "),t("p",[s._v("当运行容器时，使用的镜像如果在本地中不存在，docker 就会自动从 docker 镜像仓库中下载，默认是从 Docker Hub 公共镜像源下载。")]),s._v(" "),t("p",[s._v("Docker 的默认存储位置 var/lib/docker")]),s._v(" "),t("h3",{attrs:{id:"列出镜像列表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#列出镜像列表"}},[s._v("#")]),s._v(" 列出镜像列表")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("docker images")]),s._v("，列出本地主机的镜像。")]),s._v(" "),t("li",[s._v("各个选项说明:\n"),t("ul",[t("li",[t("code",[s._v("REPOSITORY")]),s._v("：表示镜像的仓库源")]),s._v(" "),t("li",[t("code",[s._v("TAG")]),s._v("：镜像的标签")]),s._v(" "),t("li",[t("code",[s._v("IMAGE ID")]),s._v("：镜像ID")]),s._v(" "),t("li",[t("code",[s._v("CREATED")]),s._v("：镜像创建时间")]),s._v(" "),t("li",[t("code",[s._v("SIZE")]),s._v("：镜像大小")])])]),s._v(" "),t("li",[s._v("使用 "),t("code",[s._v("REPOSITORY:TAG")]),s._v(" 来定义不同的镜像。")])]),s._v(" "),t("h3",{attrs:{id:"获取一个新的镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#获取一个新的镜像"}},[s._v("#")]),s._v(" 获取一个新的镜像")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("docker pull ubuntu:13.10")])])]),s._v(" "),t("h3",{attrs:{id:"查找镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查找镜像"}},[s._v("#")]),s._v(" 查找镜像")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("docker search httpd")])]),s._v(" "),t("li",[s._v("参数说明：\n"),t("ul",[t("li",[t("code",[s._v("NAME")]),s._v(": 镜像仓库源的名称")]),s._v(" "),t("li",[t("code",[s._v("DESCRIPTION")]),s._v(": 镜像的描述")]),s._v(" "),t("li",[t("code",[s._v("OFFICIAL")]),s._v(": 是否 docker 官方发布")]),s._v(" "),t("li",[t("code",[s._v("stars")]),s._v(": 类似 Github 里面的 star，表示点赞、喜欢的意思。")]),s._v(" "),t("li",[t("code",[s._v("AUTOMATED")]),s._v(": 自动构建。")])])])]),s._v(" "),t("h3",{attrs:{id:"删除镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#删除镜像"}},[s._v("#")]),s._v(" 删除镜像")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("docker rmi hello-world")])]),s._v(" "),t("li",[s._v("注意，这里是 "),t("strong",[t("code",[s._v("rmi")])]),s._v(",rm image，删除容器是 rm。")])]),s._v(" "),t("h3",{attrs:{id:"创建镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建镜像"}},[s._v("#")]),s._v(" 创建镜像")]),s._v(" "),t("p",[s._v("当我们从 docker 镜像仓库中下载的镜像不能满足我们的需求时，我们可以通过以下两种方式对镜像进行更改。")]),s._v(" "),t("ol",[t("li",[s._v("从已经创建的容器中更新镜像，并且提交这个镜像。")]),s._v(" "),t("li",[s._v("使用 Dockerfile 指令来创建一个新的镜像。")])]),s._v(" "),t("h3",{attrs:{id:"更新镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#更新镜像"}},[s._v("#")]),s._v(" 更新镜像")]),s._v(" "),t("p",[s._v("更新镜像之前，需要使用镜像来创建一个容器。")]),s._v(" "),t("ol",[t("li",[s._v("在运行的镜像内使用 "),t("code",[s._v("apt-get update")]),s._v(" 来更新镜像。")]),s._v(" "),t("li",[s._v("完成操作，输入 exit 退出这个容器。")]),s._v(" "),t("li",[t("code",[s._v("docker commit")]),s._v("，提交容器副本。\n"),t("ul",[t("li",[s._v("例如，"),t("code",[s._v('docker commit -m="has update" -a="runoob" e218edb10161 runoob/ubuntu:v2')])]),s._v(" "),t("li",[s._v("参数说明：\n"),t("ul",[t("li",[t("code",[s._v("-m")]),s._v(": 提交的描述信息")]),s._v(" "),t("li",[t("code",[s._v("-a")]),s._v(": 指定镜像作者")]),s._v(" "),t("li",[t("code",[s._v("e218edb10161")]),s._v("：容器 ID")]),s._v(" "),t("li",[t("code",[s._v("runoob/ubuntu:v2")]),s._v(": 指定要创建的目标镜像名")])])])])]),s._v(" "),t("li",[s._v("查看新镜像，"),t("code",[s._v("docker images")]),s._v("。")]),s._v(" "),t("li",[s._v("使用新镜像来启动一个容器。\n"),t("ul",[t("li",[s._v("例如："),t("code",[s._v("docker run -t -i runoob/ubuntu:v2 /bin/bash")])])])])]),s._v(" "),t("h3",{attrs:{id:"构建镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#构建镜像"}},[s._v("#")]),s._v(" 构建镜像")]),s._v(" "),t("p",[s._v("使用命令 "),t("code",[s._v("docker build")]),s._v("， 从零开始来创建一个新的镜像。为此，我们需要创建一个 Dockerfile 文件，其中包含一组指令来告诉 Docker 如何构建我们的镜像。")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("创建 "),t("a",{attrs:{href:"#dockerfile"}},[s._v("Dockerfile")]),s._v(" 文件。")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("FROM    centos:6.7\nMAINTAINER      Fisher "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"fisher@sudops.com"')]),s._v("\n\nRUN     /bin/echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'root:123456'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("chpasswd\nRUN     "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("useradd")]),s._v(" runoob\nRUN     /bin/echo "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'runoob:123456'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("chpasswd\nRUN     /bin/echo -e "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"LANG='),t("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v("en_US.UTF-8"),t("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[s._v('\\"')]),s._v('"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("/etc/default/local\nEXPOSE  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),s._v("\nEXPOSE  "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("\nCMD     /usr/sbin/sshd -D\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("ul",[t("li",[s._v("每一个指令都会在镜像上创建一个新的层，每一个指令的前缀都必须是大写的。")]),s._v(" "),t("li",[s._v("第一条 FROM，指定使用哪个镜像源")]),s._v(" "),t("li",[s._v("RUN 指令告诉 docker 在镜像内执行命令，安装了什么。")])])]),s._v(" "),t("li",[t("p",[s._v("使用 docker build 命令进行构建。")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("docker build -t runoob/centos:6.7 .")])]),s._v(" "),t("li",[t("code",[s._v("-t")]),s._v("：指定要创建的目标镜像名")]),s._v(" "),t("li",[t("code",[s._v(".")]),s._v("：Dockerfile 文件所在目录，可以指定 Dockerfile 的绝对路径")])])])]),s._v(" "),t("h3",{attrs:{id:"设置镜像标签"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设置镜像标签"}},[s._v("#")]),s._v(" 设置镜像标签")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("docker tag 860c279d2fec runoob/centos:dev")])]),s._v(" "),t("li",[t("code",[s._v("docker tag [容器 ID] [用户名]/[镜像源名]:[新标签名]")])])]),s._v(" "),t("h2",{attrs:{id:"仓库管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#仓库管理"}},[s._v("#")]),s._v(" 仓库管理")]),s._v(" "),t("p",[s._v("目前 Docker 官方维护了一个公共仓库 Docker Hub。")]),s._v(" "),t("p",[s._v("大部分需求都可以通过在 Docker Hub 中直接下载镜像来实现。")]),s._v(" "),t("p",[s._v("在 "),t("code",[s._v("https://hub.docker.com")]),s._v(" 免费注册一个 Docker 账号。\n`\n登录需要输入用户名和密码，登录成功后，我们就可以从 docker hub 上拉取自己账号下的全部镜像。")]),s._v(" "),t("ul",[t("li",[s._v("登录，"),t("code",[s._v("docker login")])]),s._v(" "),t("li",[s._v("退出，"),t("code",[s._v("docker logout")])])]),s._v(" "),t("h3",{attrs:{id:"拉取镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#拉取镜像"}},[s._v("#")]),s._v(" 拉取镜像")]),s._v(" "),t("ul",[t("li",[s._v("使用 "),t("code",[s._v("docker search")]),s._v(" 查找镜像，然后使用 "),t("code",[s._v("docker pull")]),s._v(" 将它下载到本地。")])]),s._v(" "),t("h3",{attrs:{id:"推送镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#推送镜像"}},[s._v("#")]),s._v(" 推送镜像")]),s._v(" "),t("ol",[t("li",[t("code",[s._v("docker push username/ubuntu:18.04")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("docker push [用户名]/[镜像名]：[标签名]")])])])]),s._v(" "),t("li",[t("code",[s._v("docker search username/ubuntu")])])]),s._v(" "),t("h2",{attrs:{id:"数据管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据管理"}},[s._v("#")]),s._v(" 数据管理")]),s._v(" "),t("p",[s._v("可以 "),t("em",[s._v("绑定数据卷")]),s._v(" 或者 "),t("em",[s._v("挂载主机目录")]),s._v(" 两种方式。")]),s._v(" "),t("h3",{attrs:{id:"数据卷"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据卷"}},[s._v("#")]),s._v(" 数据卷")]),s._v(" "),t("p",[s._v("数据卷是一个可以供一个或多个容器使用的特殊目录，它绕过了 UFS，提供了很多有用的特性：")]),s._v(" "),t("ul",[t("li",[s._v("数据卷可以在容器间共享和重用。")]),s._v(" "),t("li",[s._v("对数据卷的修改会立马生效。")]),s._v(" "),t("li",[s._v("对数据卷的更新，不会影响镜像。")]),s._v(" "),t("li",[s._v("数据卷默认会一直存在，即使容器被删除。")])]),s._v(" "),t("blockquote",[t("p",[s._v("注意：数据卷的使用，类似于 Linux 下对目录或文件进行 mount，镜像中的被指定为挂载点的目录中的文件会复制到数据卷中（仅数据卷为空时会复制）。")])]),s._v(" "),t("h4",{attrs:{id:"创建一个数据卷"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建一个数据卷"}},[s._v("#")]),s._v(" 创建一个数据卷")]),s._v(" "),t("p",[s._v("创建："),t("code",[s._v("docker volume create my-vol")])]),s._v(" "),t("p",[s._v("查看所有数据卷："),t("code",[s._v("docker volume ls")])]),s._v(" "),t("p",[s._v("查看数据卷详细信息："),t("code",[s._v("docker volume inspect my-vol")])]),s._v(" "),t("h4",{attrs:{id:"启动一个挂载数据卷的容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#启动一个挂载数据卷的容器"}},[s._v("#")]),s._v(" 启动一个挂载数据卷的容器")]),s._v(" "),t("p",[s._v("使用 "),t("code",[s._v("docker run")]),s._v(" 运行一个容器的时候，可以使用 "),t("code",[s._v("--mount")]),s._v(" 参数指定将一个数据卷挂载到容器上。在一次 "),t("code",[s._v("docker run")]),s._v(" 中可以挂载多个数据卷。")]),s._v(" "),t("p",[s._v("示例：创建一个名为 web 的容器，并加载一个数据卷到容器的 "),t("code",[s._v("/usr/share/nginx/html")]),s._v(" 目录。")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("docker run -d -P "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    --name web "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -v my-vol:/usr/share/nginx/html \\")]),s._v("\n    --mount "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("source")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("my-vol,target"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/usr/share/nginx/html "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    nginx:alpine\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h4",{attrs:{id:"查看数据卷的具体信息"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看数据卷的具体信息"}},[s._v("#")]),s._v(" 查看数据卷的具体信息")]),s._v(" "),t("p",[t("code",[s._v("docker inspect web")]),s._v(" 可以查看容器的详细信息，其中数据卷的信息在 "),t("code",[s._v("Mounts")]),s._v(" 下：")]),s._v(" "),t("div",{staticClass:"language-json line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"Mounts"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"Type"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"volume"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"Name"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"my-vol"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"Source"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/var/lib/docker/volumes/my-vol/_data"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"Destination"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/usr/share/nginx/html"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"Driver"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"local"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"Mode"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"RW"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"Propagation"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("h4",{attrs:{id:"删除数据卷"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#删除数据卷"}},[s._v("#")]),s._v(" 删除数据卷")]),s._v(" "),t("p",[t("code",[s._v("docker volume rm my-vol")])]),s._v(" "),t("p",[s._v("数据卷是被设计用来持久化数据的，它的生命周期独立于容器，Docker 不会在容器被删除后自动删除数据卷，并且也不会存在垃圾回收这样的机制来处理没有任何容器引用的数据卷。如果要在删除容器的同时删除数据卷，可以在删除容器的时候使用 "),t("code",[s._v("docker rm -v")]),s._v(" 命令。")]),s._v(" "),t("p",[s._v("无主的数据卷可能会占用很多空间，要清理可以使用 "),t("code",[s._v("docker volume prune")]),s._v("。")]),s._v(" "),t("h3",{attrs:{id:"挂载主机目录"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#挂载主机目录"}},[s._v("#")]),s._v(" 挂载主机目录")]),s._v(" "),t("h4",{attrs:{id:"挂载一个主机目录作为数据卷"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#挂载一个主机目录作为数据卷"}},[s._v("#")]),s._v(" 挂载一个主机目录作为数据卷")]),s._v(" "),t("p",[s._v("使用 "),t("code",[s._v("--mount")]),s._v(" 命令可以指定挂载一个本地主机的目录到容器中去：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("docker run -d -P "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    --name web "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -v /src/webapp:/usr/share/nginx/html \\")]),s._v("\n    --mount "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("type")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("bind,source"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/src/webapp,target"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/usr/share/nginx/html "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    nginx:alpine\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("上面的命令加载主机的 "),t("code",[s._v("/src/webapp")]),s._v(" 目录到容器的 "),t("code",[s._v("/usr/share/nginx/html")]),s._v("，这个功能在测试的时候很方便，比如用户可以放置一些程序到本地目录中，来查看容器是正常工作。"),t("strong",[s._v("本地目录的路径必须是绝对路径")]),s._v("，以前使用 "),t("code",[s._v("-v")]),s._v(" 参数时，如果本地目录不存在 Docker 会自动为你创建一个文件夹，现在使用 "),t("code",[s._v("--mount")]),s._v(" 参数，如果本地目录不存在的话，Docker 会报错。")]),s._v(" "),t("p",[s._v("Docker 挂载主机目录的默认权限是读写，用户也可以通过增加 "),t("code",[s._v("readonly")]),s._v(" 指定为只读：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("docker -run -d -P "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    --name web "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -v /src/webapp:/usr/share/nginx/html:ro \\")]),s._v("\n    --mount "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("type")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("bind,source"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/src/webapp,target"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/usr/share/nginx/html,readonly "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    nginx:alpine\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("加了 "),t("code",[s._v("readonly")]),s._v(" 之后，就挂载为只读了。如果你在容器内 "),t("code",[s._v("/usr/share/nginx/html")]),s._v(" 目录新建文件，会显示如下错误：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("/usr/share/nginx/html "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# touch new.text")]),s._v("\ntouch: new.text: Read-only "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" system\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h4",{attrs:{id:"挂载一个本地主机文件作为数据卷"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#挂载一个本地主机文件作为数据卷"}},[s._v("#")]),s._v(" 挂载一个本地主机文件作为数据卷")]),s._v(" "),t("p",[t("code",[s._v("--mount")]),s._v(" 参数也可以从主机挂载单个文件到容器中：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("docker run --rm -it "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# -v $HOME/.bash_history:/root/.bash_history")]),s._v("\n    --mount type:bind,source"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$HOME")]),s._v("/.bash_history,target"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("/root/.bash_history "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    ubuntu:18.04 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v("    \n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("h2",{attrs:{id:"docker-网络"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-网络"}},[s._v("#")]),s._v(" Docker 网络")]),s._v(" "),t("h3",{attrs:{id:"外部访问容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#外部访问容器"}},[s._v("#")]),s._v(" 外部访问容器")]),s._v(" "),t("p",[s._v("容器中可以运行一些网络应用，要让外部也可以访问这些应用，可以通过 "),t("code",[s._v("-p")]),s._v(" 或 "),t("code",[s._v("-P")]),s._v(" 参数来指定端口映射。")]),s._v(" "),t("p",[s._v("当使用 "),t("code",[s._v("-P")]),s._v(" 标记时，Docker 会随机映射一个端口到内部容器开放的网络端口。")]),s._v(" "),t("p",[s._v("使用 "),t("code",[s._v("docker container ls")]),s._v(" 可以看到，本地主机的 32768 被映射到了容器的 80 端口。此时访问本机的 32768 端口即可访问容器内 NGINX 默认页面：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("docker run -d -P nginx:alpine\n\ndocker container "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v(" -l\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                   NAMES")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# fae320d08268        nginx:alpine        "/docker-entrypoint.…"   24 seconds ago      Up 20 seconds       0.0.0.0:32768->80/tcp   bold_mcnulty')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("同样的，可以通过 "),t("code",[s._v("docker logs")]),s._v(" 命令来查看访问记录。")]),s._v(" "),t("h3",{attrs:{id:"端口映射"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#端口映射"}},[s._v("#")]),s._v(" 端口映射")]),s._v(" "),t("p",[s._v("格式："),t("code",[s._v("<主机端口>:<容器端口>")])]),s._v(" "),t("ul",[t("li",[t("code",[s._v("-P")]),s._v("："),t("em",[s._v("随机")]),s._v(" 映射一个主机端口 -> 容器内部开放的网络端口。")]),s._v(" "),t("li",[t("code",[s._v("-p")]),s._v("："),t("em",[s._v("指定")]),s._v(" 一个主机端口 -> 容器内部开放的网络端口。")])]),s._v(" "),t("h4",{attrs:{id:"示例"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[s._v("#")]),s._v(" 示例")]),s._v(" "),t("ul",[t("li",[s._v("映射所有接口地址")])]),s._v(" "),t("p",[s._v("使用 "),t("code",[s._v("ip:hostPort:containerPort")]),s._v(" 格式将本地 80 端口映射到容器的 80 端口：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("docker run -d -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(":80 nginx:alpine\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("映射到指定地址的"),t("strong",[s._v("指定")]),s._v("端口")])]),s._v(" "),t("p",[s._v("可以使用 "),t("code",[s._v("ip:hostPort:containerPort")]),s._v(" 格式指定映射使用一个特定地址，比如 localhost 地址 127.0.0.1：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("docker run -d -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:80:80\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[s._v("映射到指定地址的"),t("strong",[s._v("任意")]),s._v("端口")])]),s._v(" "),t("p",[s._v("使用 "),t("code",[s._v("ip:containerPort")]),s._v(" 绑定 localhost 的任意端口到容器的 80 端口，本地主机会自动分配一个端口：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("docker run -d -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1::80 nginx:alpine\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("还可以使用 "),t("code",[s._v("udp")]),s._v(" 标记来指定 "),t("code",[s._v("udp")]),s._v(" 端口：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("docker run -d -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:80:80/udp nginx:alpine\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"查看映射端口配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查看映射端口配置"}},[s._v("#")]),s._v(" 查看映射端口配置")]),s._v(" "),t("p",[s._v("使用 "),t("code",[s._v("docker port <containerId / containerName>")]),s._v(" 来查看当前映射的端口配置，也可以查看到绑定的地址。")]),s._v(" "),t("p",[s._v("注意：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("容器有自己的内部网络和 IP 地址（使用 "),t("code",[s._v("docker inspect")]),s._v(" 查看，Docker 还可以有一个可变的网络配置。）")])]),s._v(" "),t("li",[t("p",[t("code",[s._v("-p")]),s._v(" 标记可以多次使用来绑定多个端口，例如：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("    docker run -d "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n        -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(":80 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n        -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("443")]),s._v(":443 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n        nginx:alpine\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])])])]),s._v(" "),t("h3",{attrs:{id:"容器互联"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#容器互联"}},[s._v("#")]),s._v(" 容器互联")]),s._v(" "),t("p",[s._v("如果你之前有 Docker 的使用经验，你可能习惯了使用 "),t("code",[s._v("--link")]),s._v(" 参数来使容器互联。")]),s._v(" "),t("p",[s._v("随着 Docker 网络的完善，强烈建议大家将容器加入自定义的 Docker 网络来连接多个容器，而不是使用 "),t("code",[s._v("--link")]),s._v("。")]),s._v(" "),t("h4",{attrs:{id:"新建网络"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#新建网络"}},[s._v("#")]),s._v(" 新建网络")]),s._v(" "),t("p",[t("code",[s._v("docker network create -d bridge my-net")])]),s._v(" "),t("p",[t("code",[s._v("-d")]),s._v(" 参数指定 Docker 网络类型，有 "),t("code",[s._v("bridge")]),s._v("、"),t("code",[s._v("overlay")]),s._v("。")]),s._v(" "),t("p",[s._v("其中 "),t("code",[s._v("overlay")]),s._v(" 网络类型用于 Swarm mode。")]),s._v(" "),t("h4",{attrs:{id:"连接容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#连接容器"}},[s._v("#")]),s._v(" 连接容器")]),s._v(" "),t("ol",[t("li",[s._v("运行一个容器并连接到新建的 "),t("code",[s._v("my-net")]),s._v(" 网络： "),t("code",[s._v("docker run -it --rm --name busybox1 --network my-net busybox sh")]),s._v("。")]),s._v(" "),t("li",[s._v("再运行一个新的容器加入到 "),t("code",[s._v("my-net")]),s._v(" 网络： "),t("code",[s._v("docker run -it --rm --name busybox2 --network my-net busybox sh")]),s._v("。")])]),s._v(" "),t("p",[s._v("然后在一个容器里 ping 另外一个容器。")]),s._v(" "),t("h3",{attrs:{id:"配置-dns"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置-dns"}},[s._v("#")]),s._v(" 配置 DNS")]),s._v(" "),t("p",[s._v("如何自定义配置容器的主机名和 DNS 呢？答案就是 Docker 利用虚拟文件来挂载容器的 3 个相关配置文件。")]),s._v(" "),t("p",[s._v("在容器中使用 "),t("code",[s._v("mount")]),s._v(" 命令可以看到挂载信息。这种机制可以让宿主主机 DNS 信息发生更新后，所有 Docker 容器的 DNS 配置通过 "),t("code",[s._v("/etc/resolv.config")]),s._v(" 文件得到立即更新。")]),s._v(" "),t("p",[s._v("配置全部容器的 DNS，也可以在 "),t("code",[s._v("/etc/docker/daemon.json")]),s._v(" 文件设置：")]),s._v(" "),t("div",{staticClass:"language-json line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[s._v('"dns"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"114.114.114.114"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"8.8.8.8"')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("// TODO")]),s._v(" "),t("h2",{attrs:{id:"dockerfile"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile"}},[s._v("#")]),s._v(" Dockerfile")]),s._v(" "),t("p",[s._v("Dockerfile 是一个用来构建镜像的文本文件，文本内容包含了一条条构建镜像所需的指令和说明。")]),s._v(" "),t("h3",{attrs:{id:"定制镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定制镜像"}},[s._v("#")]),s._v(" 定制镜像")]),s._v(" "),t("p",[s._v("例如定制一个 nginx 镜像（构建好的镜像内会有一个 /usr/share/nginx/html/index.html 文件）：")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("在一个空目录下，新建一个名为 Dockerfile 文件，并在文件内添加以下内容：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("    FROM nginx\n    RUN "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'这是一个本地镜像'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" /usr/share/nginx/html/index.html\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("ul",[t("li",[s._v("FROM：定制的镜像都是基于 FROM 的镜像，这里的 nginx 就是定制需要的基础镜像。后续的操作都是基于 nginx。")]),s._v(" "),t("li",[s._v("RUN：用于执行后面跟着的命令行命令。有以下俩种格式：\n"),t("ul",[t("li",[s._v("shell 格式：\n"),t("ul",[t("li",[t("code",[s._v("RUN <命令行命令> 参数1 参数2")])]),s._v(" "),t("li",[s._v("<命令行命令> 等同于，在终端操作的 shell 命令。")])])]),s._v(" "),t("li",[s._v("exec 格式：\n"),t("ul",[t("li",[t("code",[s._v('RUN ["可执行文件", "参数1", "参数2"]')])]),s._v(" "),t("li",[s._v("例如：\n"),t("ul",[t("li",[t("code",[s._v('RUN ["./test.php", "dev", "offline"] 等价于 RUN ./test.php dev offline')])])])])])])])])])]),s._v(" "),t("li",[t("p",[s._v("在 Dockerfile 文件的存放目录下，执行构建动作。")]),s._v(" "),t("ul",[t("li",[s._v("以下示例，通过目录下的 Dockerfile 构建一个 nginx:v3（镜像名称:镜像标签）。")]),s._v(" "),t("li",[s._v("注：最后的 . 代表本次执行的上下文路径，下一节会介绍。")])])])]),s._v(" "),t("h3",{attrs:{id:"上下文路径"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#上下文路径"}},[s._v("#")]),s._v(" 上下文路径")]),s._v(" "),t("p",[t("code",[s._v("docker build -t nginx:v3 .")]),s._v("，指令最后一个 "),t("code",[s._v(".")]),s._v(" 是上下文路径。")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("上下文路径，是指 docker 在构建镜像，有时候想要使用到本机的文件（比如复制），"),t("code",[s._v("docker build")]),s._v(" 命令得知这个路径后，会将路径下的所有内容打包。")])]),s._v(" "),t("li",[t("p",[s._v("解析：由于 docker 的运行模式是 C/S。我们本机是 C，docker 引擎是 S。实际的构建过程是在 docker 引擎下完成的，所以这个时候无法用到我们本机的文件。这就需要把我们本机的指定目录下的文件一起打包提供给 docker 引擎使用。")])]),s._v(" "),t("li",[t("p",[s._v("如果未说明最后一个参数，那么默认上下文路径就是 Dockerfile 所在的位置。")])])]),s._v(" "),t("p",[t("strong",[s._v("注意：")]),s._v(" 上下文路径下不要放无用的文件，因为会一起打包发送给 docker 引擎，如果文件过多会造成过程缓慢。")]),s._v(" "),t("h3",{attrs:{id:"指令集"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#指令集"}},[s._v("#")]),s._v(" 指令集")]),s._v(" "),t("h4",{attrs:{id:"copy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#copy"}},[s._v("#")]),s._v(" "),t("strong",[s._v("COPY")])]),s._v(" "),t("p",[s._v("复制指令，从上下文目录中复制文件或者目录到容器里指定路径。")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("格式：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("    COPY "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("--chown"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("user"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(":"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("group"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("源路径"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("1")]),s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("目标路径"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n    COPY "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("--chown"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("user"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(":"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("group"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<源路径1>"')]),s._v(","),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".  "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<目标路径>"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("--chown"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("user"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(":"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("group"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("：可选参数，用户改变复制到容器内文件的拥有者和属组。\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("ul",[t("li",[t("p",[s._v("<源路径>：源文件或者源目录，这里可以是通配符表达式，其通配符规则要满足 Go 的 filepath.Match 规则。例如：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("    COPY hom* /mydir/\n    COPY hom?.txt /mydir/\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])])]),s._v(" "),t("li",[t("p",[s._v("<目标路径>：容器内的指定路径，该路径不用事先建好，路径不存在的话，会自动创建。")])])])])]),s._v(" "),t("h4",{attrs:{id:"add"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#add"}},[s._v("#")]),s._v(" "),t("strong",[s._v("ADD")])]),s._v(" "),t("p",[s._v("ADD 指令和 COPY 的使用格类似（同样需求下，官方推荐使用 COPY）。功能也类似，不同之处如下：")]),s._v(" "),t("p",[s._v("ADD 的优点：在执行 <源文件> 为 tar 压缩文件的话，压缩格式为 gzip, bzip2 以及 xz 的情况下，会自动复制并解压到 <目标路径>。\nADD 的缺点：在不解压的前提下，无法复制 tar 压缩文件。会令镜像构建缓存失效，从而可能会令镜像构建变得比较缓慢。具体是否使用，可以根据是否需要自动解压来决定。")]),s._v(" "),t("h4",{attrs:{id:"cmd"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cmd"}},[s._v("#")]),s._v(" "),t("strong",[s._v("CMD")])]),s._v(" "),t("p",[s._v("类似于 RUN 指令，用于运行程序，但二者运行的时间点不同:")]),s._v(" "),t("ul",[t("li",[s._v("CMD 在docker run 时运行。")]),s._v(" "),t("li",[s._v("RUN 是在 docker build。")])]),s._v(" "),t("p",[s._v("作用：为启动的容器指定默认要运行的程序，程序运行结束，容器也就结束。CMD 指令指定的程序可被 docker run 命令行参数中指定要运行的程序所覆盖。")]),s._v(" "),t("p",[t("strong",[s._v("注意：")]),s._v(" 如果 Dockerfile 中如果存在多个 CMD 指令，仅最后一个生效。")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("格式：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("    CMD "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("shell 命令"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n    CMD "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<可执行文件或命令>"')]),s._v(","),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<param1>"')]),s._v(","),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<param2>"')]),s._v(","),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n    CMD "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<param1>"')]),s._v(","),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<param2>"')]),s._v(","),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v("."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 该写法是为 ENTRYPOINT 指令指定的程序提供默认参数")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])])])]),s._v(" "),t("p",[s._v("推荐使用第二种格式，执行过程比较明确。第一种格式实际上在运行的过程中也会自动转换成第二种格式运行，并且默认可执行文件是 sh。")]),s._v(" "),t("h4",{attrs:{id:"entrypoint"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#entrypoint"}},[s._v("#")]),s._v(" "),t("strong",[s._v("ENTRYPOINT")])]),s._v(" "),t("p",[s._v("类似于 CMD 指令，但其不会被 docker run 的命令行参数指定的指令所覆盖，而且这些命令行参数会被当作参数送给 ENTRYPOINT 指令指定的程序。但是, 如果运行 docker run 时使用了 "),t("code",[s._v("--entrypoint")]),s._v(" 选项，将覆盖 CMD 指令指定的程序。")]),s._v(" "),t("p",[s._v("优点：在执行 docker run 的时候可以指定 ENTRYPOINT 运行所需的参数。")]),s._v(" "),t("p",[s._v("注意：如果 Dockerfile 中如果存在多个 ENTRYPOINT 指令，仅最后一个生效。")]),s._v(" "),t("p",[s._v("格式："),t("code",[s._v('ENTRYPOINT ["<executeable>","<param1>","<param2>",...]')])]),s._v(" "),t("p",[s._v("可以搭配 CMD 命令使用：一般是变参才会使用 CMD，这里的 CMD 等于是在给 ENTRYPOINT 传参，以下示例会提到。")]),s._v(" "),t("p",[s._v("示例：")]),s._v(" "),t("p",[s._v("假设已通过 Dockerfile 构建了 nginx:test 镜像：")]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("FROM nginx\n\nENTRYPOINT "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"nginx"')]),s._v(", "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-c"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 定参")]),s._v("\nCMD "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/etc/nginx/nginx.conf"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 变参")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 1、不传参运行")]),s._v("\ndocker run  nginx:test\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 容器内会默认运行以下命令，启动主进程。")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# nginx -c /etc/nginx/nginx.conf")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 2、传参运行")]),s._v("\ndocker run  nginx:test -c /etc/nginx/new.conf\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 容器内会默认运行以下命令，启动主进程(/etc/nginx/new.conf:假设容器内已有此文件)")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# nginx -c /etc/nginx/new.conf")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("h4",{attrs:{id:"env"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#env"}},[s._v("#")]),s._v(" "),t("strong",[s._v("ENV")])]),s._v(" "),t("p",[s._v("设置环境变量，定义了环境变量，那么在后续的指令中，就可以使用这个环境变量。")]),s._v(" "),t("p",[s._v("格式：")]),s._v(" "),t("p",[t("code",[s._v("ENV <key> <value>")]),s._v(" or "),t("code",[s._v("ENV <key1>=<value1> <key2>=<value2>...")])]),s._v(" "),t("p",[s._v("以下示例设置 NODE_VERSION = 7.2.0 ， 在后续的指令中可以通过 $NODE_VERSION 引用：")]),s._v(" "),t("p",[t("code",[s._v("ENV NODE_VERSION 7.2.0")])]),s._v(" "),t("div",{staticClass:"language-sh line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[s._v("RUN "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" -SLO "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://nodejs.org/dist/v'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$NODE_VERSION")]),s._v("/node-v"),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$NODE_VERSION")]),s._v('-linux-x64.tar.xz"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" -SLO "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"https://nodejs.org/dist/v'),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$NODE_VERSION")]),s._v('/SHASUMS256.txt.asc"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h4",{attrs:{id:"arg"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arg"}},[s._v("#")]),s._v(" "),t("strong",[s._v("ARG")])]),s._v(" "),t("p",[s._v("构建参数，与 ENV 作用一致。不过作用域不一样。ARG 设置的环境变量仅对 Dockerfile 内有效，也就是说只有 docker build 的过程中有效，构建好的镜像内不存在此环境变量。")]),s._v(" "),t("p",[s._v("构建命令 docker build 中可以用 "),t("code",[s._v("--build-arg <参数名>=<值>")]),s._v(" 来覆盖。")]),s._v(" "),t("p",[s._v("格式：")]),s._v(" "),t("p",[t("code",[s._v("ARG <参数名>[=<默认值>]")])]),s._v(" "),t("h4",{attrs:{id:"volume"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#volume"}},[s._v("#")]),s._v(" "),t("strong",[s._v("VOLUME")])]),s._v(" "),t("p",[s._v("定义匿名数据卷。在启动容器时忘记挂载数据卷，会自动挂载到匿名卷。")]),s._v(" "),t("p",[s._v("作用：避免重要的数据，因容器重启而丢失，这是非常致命的。避免容器不断变大。")]),s._v(" "),t("p",[s._v("格式：")]),s._v(" "),t("p",[t("code",[s._v('VOLUME ["<路径1>", "<路径2>"...]')]),s._v(" or "),t("code",[s._v("VOLUME <路径>")])]),s._v(" "),t("p",[s._v("在启动容器 docker run 的时候，我们可以通过 "),t("code",[s._v("-v")]),s._v(" 参数修改挂载点。")]),s._v(" "),t("h4",{attrs:{id:"expose"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#expose"}},[s._v("#")]),s._v(" "),t("strong",[s._v("EXPOSE")])]),s._v(" "),t("p",[s._v("仅仅只是声明端口。")]),s._v(" "),t("p",[s._v("作用：帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射。在运行时使用随机端口映射时，也就是 "),t("code",[s._v("docker run -P")]),s._v(" 时，会自动随机映射 EXPOSE 的端口。")]),s._v(" "),t("p",[s._v("格式：")]),s._v(" "),t("p",[t("code",[s._v("EXPOSE <端口1> [<端口2>...]")])]),s._v(" "),t("h4",{attrs:{id:"workdir"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#workdir"}},[s._v("#")]),s._v(" "),t("strong",[s._v("WORKDIR")])]),s._v(" "),t("p",[s._v("指定工作目录。用 WORKDIR 指定的工作目录，会在构建镜像的每一层中都存在。（WORKDIR 指定的工作目录，必须是提前创建好的）。")]),s._v(" "),t("p",[s._v("docker build 构建镜像过程中的，每一个 RUN 命令都是新建的一层。只有通过 WORKDIR 创建的目录才会一直存在。")]),s._v(" "),t("p",[s._v("格式：")]),s._v(" "),t("p",[t("code",[s._v("WORKDIR <工作目录路径>")])]),s._v(" "),t("h4",{attrs:{id:"user"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#user"}},[s._v("#")]),s._v(" "),t("strong",[s._v("USER")])]),s._v(" "),t("p",[s._v("用于指定执行后续命令的用户和用户组，这边只是切换后续命令执行的用户（用户和用户组必须提前已经存在）。")]),s._v(" "),t("p",[s._v("格式：")]),s._v(" "),t("p",[t("code",[s._v("USER <用户名>[:<用户组>]")])]),s._v(" "),t("h4",{attrs:{id:"healthcheck"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#healthcheck"}},[s._v("#")]),s._v(" "),t("strong",[s._v("HEALTHCHECK")])]),s._v(" "),t("p",[s._v("用于指定某个程序或者指令来监控 docker 容器服务的运行状态。")]),s._v(" "),t("p",[s._v("格式：")]),s._v(" "),t("p",[t("code",[s._v("HEALTHCHECK [选项] CMD <命令>")]),s._v("：设置检查容器健康状况的命令")]),s._v(" "),t("p",[t("code",[s._v("HEALTHCHECK NONE")]),s._v("：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令")]),s._v(" "),t("p",[t("code",[s._v("HEALTHCHECK [选项] CMD <命令>")]),s._v(": 这边 CMD 后面跟随的命令使用，可以参考 CMD 的用法。")]),s._v(" "),t("h4",{attrs:{id:"onbuild"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#onbuild"}},[s._v("#")]),s._v(" "),t("strong",[s._v("ONBUILD")])]),s._v(" "),t("p",[s._v("用于延迟构建命令的执行。简单的说，就是 Dockerfile 里用 ONBUILD 指定的命令，在本次构建镜像的过程中不会执行（假设镜像为 test-build）。当有新的 Dockerfile 使用了之前构建的镜像 FROM test-build ，这时执行新镜像的 Dockerfile 构建时候，会执行 test-build 的 Dockerfile 里的 ONBUILD 指定的命令。")]),s._v(" "),t("p",[s._v("格式：")]),s._v(" "),t("p",[t("code",[s._v("ONBUILD <其它指令>")])]),s._v(" "),t("h4",{attrs:{id:"label"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#label"}},[s._v("#")]),s._v(" "),t("strong",[s._v("LABEL")])]),s._v(" "),t("p",[s._v("LABEL 指令用来给镜像添加一些元数据（metadata），以键值对的形式，语法格式如下：")]),s._v(" "),t("p",[t("code",[s._v("LABEL <key>=<value> <key>=<value> <key>=<value> ...")])]),s._v(" "),t("p",[s._v("比如我们可以添加镜像的作者：")]),s._v(" "),t("p",[t("code",[s._v('LABEL org.opencontainers.image.authors="runoob"')])]),s._v(" "),t("h2",{attrs:{id:"讨论区"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#讨论区"}},[s._v("#")]),s._v(" 讨论区")]),s._v(" "),t("blockquote",[t("p",[s._v("由于评论过多会影响页面最下方的导航，故将评论区做默认折叠处理。")])]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("点击查看评论区内容，渴望您的宝贵建议~")]),s._v(" "),t("Vssue",{attrs:{title:s.$title,options:{locale:"zh"}}})],1)])}),[],!1,null,null,null);a.default=r.exports}}]);