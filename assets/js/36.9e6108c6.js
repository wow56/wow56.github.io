(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{508:function(v,_,i){"use strict";i.r(_);var e=i(48),l=Object(e.a)({},(function(){var v=this,_=v.$createElement,i=v._self._c||_;return i("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[i("h1",{attrs:{id:"git"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[v._v("#")]),v._v(" Git")]),v._v(" "),i("h2",{attrs:{id:"参考文档"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#参考文档"}},[v._v("#")]),v._v(" 参考文档")]),v._v(" "),i("ul",[i("li",[i("a",{attrs:{href:"https://git-scm.com/book/en/v2",target:"_blank",rel:"noopener noreferrer"}},[v._v("Pro Git"),i("OutboundLink")],1)]),v._v(" "),i("li",[i("a",{attrs:{href:"https://www.liaoxuefeng.com/wiki/896043488029600",target:"_blank",rel:"noopener noreferrer"}},[v._v("廖雪峰 Git"),i("OutboundLink")],1)])]),v._v(" "),i("h3",{attrs:{id:"必玩小游戏"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#必玩小游戏"}},[v._v("#")]),v._v(" 必玩小游戏")]),v._v(" "),i("ul",[i("li",[i("a",{attrs:{href:"https://learngitbranching.js.org/?locale=zh_CN",target:"_blank",rel:"noopener noreferrer"}},[v._v("Git Learn Games"),i("OutboundLink")],1)])]),v._v(" "),i("h2",{attrs:{id:"安装"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[v._v("#")]),v._v(" 安装")]),v._v(" "),i("ul",[i("li",[i("p",[v._v("在 Linux 上安装")]),v._v(" "),i("p",[v._v("如果你想在 Linux 上用二进制安装程序来安装基本的 Git 工具，可以使用发行版包含的基础软件包管理工具来安装。")]),v._v(" "),i("ul",[i("li",[v._v("以 Fedora 为例，如果你在使用它（或与之紧密相关的基于 RPM 的发行版，如 RHEL 或 CentOS），你可以使用 dnf：\n"),i("ul",[i("li",[i("code",[v._v("$ sudo dnf install git-all")])])])]),v._v(" "),i("li",[v._v("如果你在基于 Debian 的发行版上，如 Ubuntu，请使用 apt：\n"),i("ul",[i("li",[i("code",[v._v("$ sudo apt install git-all")])])])])])])]),v._v(" "),i("h2",{attrs:{id:"git-的三种状态-阶段"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-的三种状态-阶段"}},[v._v("#")]),v._v(" git 的三种状态/ 阶段")]),v._v(" "),i("h3",{attrs:{id:"三种状态"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#三种状态"}},[v._v("#")]),v._v(" 三种状态")]),v._v(" "),i("ul",[i("li",[v._v("已修改 - 修改了文件，还没有保存到数据库。")]),v._v(" "),i("li",[v._v("已暂存 - 表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。")]),v._v(" "),i("li",[v._v("已提交 - 数据已经安全地保存在本地数据库中。")])]),v._v(" "),i("h3",{attrs:{id:"三种阶段"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#三种阶段"}},[v._v("#")]),v._v(" 三种阶段")]),v._v(" "),i("p",[v._v("以上的三种状态对应Git 项目拥有三个阶段：工作区、暂存区以及 Git 目录。")]),v._v(" "),i("ul",[i("li",[v._v("工作区：对项目的某个版本独立提取出来的内容。\n"),i("ul",[i("li",[v._v("这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。")])])]),v._v(" "),i("li",[v._v("暂存区：一个文件，保存了下次将要提交的文件列表信息，一般在 Git 仓库目录中。\n"),i("ul",[i("li",[v._v("按照 Git 的术语叫做“索引”，不过一般说法还是叫“暂存区”。")])])]),v._v(" "),i("li",[v._v("Git 仓库目录：Git 用来保存项目的元数据和对象数据库的地方。\n"),i("ul",[i("li",[v._v("这是 Git 中最重要的部分，从其它计算机克隆仓库时，复制的就是这里的数据。")])])])]),v._v(" "),i("h2",{attrs:{id:"工作流程"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#工作流程"}},[v._v("#")]),v._v(" 工作流程")]),v._v(" "),i("ol",[i("li",[v._v("在工作区中修改文件。")]),v._v(" "),i("li",[v._v("将你想要下次提交的更改选择性地暂存，这样只会将更改的部分添加到暂存区。")]),v._v(" "),i("li",[v._v("提交更新，找到暂存区的文件，将快照永久性存储到 Git 目录。")])]),v._v(" "),i("h2",{attrs:{id:"帮助"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#帮助"}},[v._v("#")]),v._v(" 帮助")]),v._v(" "),i("ul",[i("li",[v._v("Git 命令的综合手册（manpage）：\n"),i("ul",[i("li",[i("code",[v._v("git help")]),v._v("，bash 下有效")]),v._v(" "),i("li",[i("code",[v._v("git --help")])]),v._v(" "),i("li",[i("code",[v._v("man git")])])])]),v._v(" "),i("li",[i("code",[v._v("git config")]),v._v(" 命令的手册，执行\n"),i("ul",[i("li",[i("code",[v._v("git help config")])])])])]),v._v(" "),i("h2",{attrs:{id:"git-基础"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-基础"}},[v._v("#")]),v._v(" Git 基础")]),v._v(" "),i("h3",{attrs:{id:"获取一个仓库"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#获取一个仓库"}},[v._v("#")]),v._v(" 获取一个仓库")]),v._v(" "),i("ul",[i("li",[v._v("新建，将尚未进行版本控制的本地目录转换为 Git 仓库。\n"),i("ul",[i("li",[v._v("切换到工程的根目录下，再执行 "),i("code",[v._v("git init")]),v._v("。")])])]),v._v(" "),i("li",[v._v("从其它服务器克隆一个已存在的 Git 仓库。\n"),i("ul",[i("li",[i("code",[v._v("git clone <url>")])])])])]),v._v(" "),i("h3",{attrs:{id:"记录每次更新到仓库"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#记录每次更新到仓库"}},[v._v("#")]),v._v(" 记录每次更新到仓库")]),v._v(" "),i("ul",[i("li",[v._v("检查当前文件状态\n"),i("ul",[i("li",[i("code",[v._v("git status")]),v._v(" 详细展示")]),v._v(" "),i("li",[i("code",[v._v("git -s")]),v._v(" 或者 "),i("code",[v._v("git --short")]),v._v(" 状态简览。\n"),i("ul",[i("li",[v._v("新添加的未跟踪文件前面有 "),i("code",[v._v("??")]),v._v(" 标记。")]),v._v(" "),i("li",[v._v("新添加到暂存区中的文件前面有 "),i("code",[v._v("A")]),v._v(" 标记。")]),v._v(" "),i("li",[v._v("修改过的文件前面有 "),i("code",[v._v("M")]),v._v(" 标记。")])])])])]),v._v(" "),i("li",[i("code",[v._v("git add")]),v._v(" 开始跟踪一个文件，如果后面跟的是一个目录，那么将会跟踪该目录下的所有文件。")]),v._v(" "),i("li",[i("code",[v._v("Changes not staged for commit")]),v._v(" 这行内容下面的文件，说明已跟踪文件的内容发生了变化，但还没有放到暂存区。")]),v._v(" "),i("li",[v._v("要暂存这次更新，需要运行 "),i("code",[v._v("git add")]),v._v(" 命令。")]),v._v(" "),i("li",[v._v("忽略文件\n"),i("ul",[i("li",[v._v("创建一个名为 "),i("code",[v._v(".gitignore")]),v._v(" 的文件")]),v._v(" "),i("li",[v._v("忽略文件规范\n"),i("ul",[i("li",[v._v("所有空行或者以 "),i("code",[v._v("#")]),v._v(" 开头的行都会被 Git 忽略。")]),v._v(" "),i("li",[v._v("可以使用标准的 glob 模式匹配，它会递归地应用在整个工作区中。\n"),i("ul",[i("li",[v._v("glob 模式是指 shell 所使用的简化了的正则表达式。\n"),i("ul",[i("li",[v._v("星号 "),i("code",[v._v("*")]),v._v(" 匹配零个或多个任意字符；")]),v._v(" "),i("li",[i("code",[v._v("[abc]")]),v._v(" 匹配任何一个列在方括号中的字符\n"),i("ul",[i("li",[v._v("这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c；")])])]),v._v(" "),i("li",[v._v("问号 "),i("code",[v._v("?")]),v._v(" 只匹配一个任意字符；")]),v._v(" "),i("li",[v._v("如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配\n"),i("ul",[i("li",[v._v("比如 [0-9] 表示匹配所有 0 到 9 的数字. 使用两个星号 "),i("code",[v._v("*")]),v._v(" 表示匹配任意中间目录，比如 a//z 可以匹配 a/z 、 a/b/z 或 a/b/c/z 等。")])])])])])])])])]),v._v(" "),i("li",[v._v("匹配模式可以以 "),i("code",[v._v("/")]),v._v(" 开头防止递归。\n"),i("ul",[i("li",[i("code",[v._v("/usr")]),v._v(" 的意思是只对这一层目录有效。")])])]),v._v(" "),i("li",[v._v("匹配模式可以以 "),i("code",[v._v("/")]),v._v(" 结尾指定目录。\n"),i("ul",[i("li",[v._v("例如： "),i("code",[v._v("usr/")]),v._v(" 的意思就是指定只是 usr 这个文件夹。")])])]),v._v(" "),i("li",[v._v("要忽略指定模式以外的文件或目录，可以在模式前加上叹号 "),i("code",[v._v("!")]),v._v(" 取反。")])])]),v._v(" "),i("li",[v._v("查看已经暂存和未暂存的修改\n"),i("ul",[i("li",[i("code",[v._v("git diff")]),v._v("，这里以补丁的形式进行展示。")]),v._v(" "),i("li",[i("code",[v._v("git diff")]),v._v(" 展示的是未暂存的修改（已暂存的不显示）")]),v._v(" "),i("li",[i("code",[v._v("git diff --staged")]),v._v(" 或者 "),i("code",[v._v("--cached")]),v._v(" 参数，展示的是已暂存的修改。")])])]),v._v(" "),i("li",[v._v("提交文件\n"),i("ul",[i("li",[i("code",[v._v("git commit -m 'information'")]),v._v("进行提交，提交时记录的是放在暂存区域的快照。\n"),i("ul",[i("li",[v._v("任何还未暂存文件的仍然保持已修改状态，可以在下次提交时纳入版本管理。")]),v._v(" "),i("li",[v._v("每一次运行提交操作，都是对你项目做一次快照，以后可以回到这个状态，或者进行比较。")])])]),v._v(" "),i("li",[i("code",[v._v("git commit -a")]),v._v("，跳过 add，但是如果是新建的文件还是需要 add。")])])]),v._v(" "),i("li",[v._v("跳过使用暂存区\n"),i("ul",[i("li",[i("code",[v._v("git commit -a")]),v._v(" ，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤。")])])]),v._v(" "),i("li",[v._v("移除文件\n"),i("ul",[i("li",[v._v("Git 中移除某个文件，就必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。")]),v._v(" "),i("li",[i("code",[v._v("git rm")]),v._v("，移除文件， 删除工作区（本地）文件，并且将这次删除放入暂存区。\n"),i("ul",[i("li",[i("strong",[v._v("注意：")]),v._v(" 要删除的文件是没有修改过的，并且没加到暂存区的，就是说和当前版本库文件的内容相同。")])])]),v._v(" "),i("li",[i("code",[v._v("git rm --cached filename")]),v._v("，删除暂存区文件，但保留工作区的文件，并且将这次删除放入暂存区。本地文件取消跟踪。")]),v._v(" "),i("li",[i("code",[v._v("git rm -f")]),v._v("，删除工作区和暂存区文件，并且将这次删除放入暂存区。\n"),i("ul",[i("li",[v._v("就是说，要删除的文件只要修改过，"),i("code",[v._v("git rm")]),v._v(" 就删除不了。删除后再提交，删除版本库。")])])]),v._v(" "),i("li",[v._v("实例\n"),i("ul",[i("li",[v._v("一个文件 test，使用 "),i("code",[v._v("rm test")]),v._v(" 命令在本地删除以后，并没有从暂存区删除。")]),v._v(" "),i("li",[v._v("如果想要从暂存区删除，那么需要 "),i("code",[v._v("git add test")]),v._v(" ，将这个文件的变动记录到暂存区，然后 "),i("code",[v._v("git commit -m 'delete test'")]),v._v("，到这里，这个文件在暂存区和版本库中也被删除了。")])])])])]),v._v(" "),i("li",[v._v("移动文件/重命名\n"),i("ul",[i("li",[i("code",[v._v("git mv file_from file_to")])]),v._v(" "),i("li",[v._v("实例\n"),i("ul",[i("li",[i("code",[v._v("git mv README.md README")])]),v._v(" "),i("li",[v._v("运行 git mv 就相当于运行了下面三条命令：\n"),i("ul",[i("li",[i("code",[v._v("mv README.md README")])]),v._v(" "),i("li",[i("code",[v._v("git rm README.md")])]),v._v(" "),i("li",[i("code",[v._v("git add README")])])])])])])])])]),v._v(" "),i("h3",{attrs:{id:"查看提交历史"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#查看提交历史"}},[v._v("#")]),v._v(" 查看提交历史")]),v._v(" "),i("ul",[i("li",[i("p",[i("code",[v._v("git log -number")]),v._v("，时间最近的在上面，数字限制展示几条。")]),v._v(" "),i("ul",[i("li",[i("p",[i("code",[v._v("-p")]),v._v(" 或者 "),i("code",[v._v("--patch")]),v._v("，将每次的改动详情也展示出来，按补丁格式显示每个提交引入的差异。")])]),v._v(" "),i("li",[i("p",[i("code",[v._v("--stat")]),v._v("，简要统计信息，显示每次提交的文件修改统计信息。")])]),v._v(" "),i("li",[i("p",[i("code",[v._v("--pretty")]),v._v("，选择格式展示，使用其他格式显示历史提交信息。")]),v._v(" "),i("p",[v._v("可用的选项包括：")]),v._v(" "),i("ul",[i("li",[v._v("oneline")]),v._v(" "),i("li",[v._v("short")]),v._v(" "),i("li",[v._v("full")]),v._v(" "),i("li",[v._v("fuller")]),v._v(" "),i("li",[v._v("format（用来定义自己的格式）")])]),v._v(" "),i("p",[v._v("例如：")]),v._v(" "),i("ul",[i("li",[i("code",[v._v("git -log --pretty=oneline")]),v._v("，\n"),i("ul",[i("li",[v._v("online 会将每个提交放在一行显示，在浏览大量的提交时非常有用。")]),v._v(" "),i("li",[v._v("另外还有 short，full 和 fuller 。")])])]),v._v(" "),i("li",[i("code",[v._v("format")]),v._v("，定制显示样式\n"),i("ul",[i("li",[v._v("比如：\n"),i("ul",[i("li",[i("code",[v._v('git log --pretty=format:"%h - %an, %ar : %s"')]),v._v(" "),i("ul",[i("li",[i("code",[v._v("%H")]),v._v(" - 提交的完整哈希值")]),v._v(" "),i("li",[i("code",[v._v("%h")]),v._v(" - 提交的简写哈希值")]),v._v(" "),i("li",[i("code",[v._v("%T")]),v._v(" - 树的完整哈希值")]),v._v(" "),i("li",[i("code",[v._v("%t")]),v._v(" - 树的简写哈希值")]),v._v(" "),i("li",[i("code",[v._v("%P")]),v._v(" - 父提交的完整哈希值")]),v._v(" "),i("li",[i("code",[v._v("%p")]),v._v(" - 父提交的简写哈希值")]),v._v(" "),i("li",[i("code",[v._v("%an")]),v._v(" - 作者名字")]),v._v(" "),i("li",[i("code",[v._v("%ae")]),v._v(" - 作者的电子邮件地址")]),v._v(" "),i("li",[i("code",[v._v("%ad")]),v._v(" - 作者修订日期（可以用 --date=选项 来定制格式）")]),v._v(" "),i("li",[i("code",[v._v("%ar")]),v._v(" - 作者修订日期，按多久以前的方式显示")]),v._v(" "),i("li",[i("code",[v._v("%cn")]),v._v(" - 提交者的名字")]),v._v(" "),i("li",[i("code",[v._v("%ce")]),v._v(" - 提交者的电子邮件地址")]),v._v(" "),i("li",[i("code",[v._v("%cd")]),v._v(" - 提交日期")]),v._v(" "),i("li",[i("code",[v._v("%cr")]),v._v(" - 提交日期（距今多长时间）")]),v._v(" "),i("li",[i("code",[v._v("%s")]),v._v(" - 提交说明")])])])])])])])])]),v._v(" "),i("li",[i("p",[i("code",[v._v("--shortstat")]),v._v("，只显示 "),i("code",[v._v("--stat")]),v._v(" 中最后的行数修改添加移除统计。")])]),v._v(" "),i("li",[i("p",[i("code",[v._v("--name-only")]),v._v("，仅在提交信息后显示已修改的文件清单。")])]),v._v(" "),i("li",[i("p",[i("code",[v._v("--name-status")]),v._v("，显示新增、修改、删除的文件清单。")])]),v._v(" "),i("li",[i("p",[i("code",[v._v("--abbrev-commit")]),v._v("，仅显示 SHA-1 校验和所有 40 个字符中的前几个字符。")])]),v._v(" "),i("li",[i("p",[i("code",[v._v("--relative-date")]),v._v("，使用较短的相对时间而不是完整格式显示日期（比如“2 weeks ago”）。")])]),v._v(" "),i("li",[i("p",[i("code",[v._v("--graph")]),v._v("，在日志旁以 ASCII 图形显示分支与合并历史。")])]),v._v(" "),i("li",[i("p",[i("code",[v._v("--oneline")]),v._v("，是 "),i("code",[v._v("--pretty=oneline --abbrev-commit")]),v._v(" 合用的简写。")])])])]),v._v(" "),i("li",[i("p",[v._v("限制输出长度")]),v._v(" "),i("ul",[i("li",[i("p",[i("code",[v._v("--since")]),v._v(", "),i("code",[v._v("--after")]),v._v("，仅显示指定时间之后的提交。")]),v._v(" "),i("p",[v._v("例如：")]),v._v(" "),i("ul",[i("li",[i("code",[v._v("git log --since=2.weeks")]),v._v("，最近两周的。")]),v._v(" "),i("li",[v._v("该命令可用的格式十分丰富。\n"),i("ul",[i("li",[v._v('可以是类似 "2008-01-15" 的具体的某一天')]),v._v(" "),i("li",[v._v('也可以是类似 "2 years 1 day 3 minutes ago" 的相对日期。')])])])])]),v._v(" "),i("li",[i("p",[i("code",[v._v("--until")]),v._v(","),i("code",[v._v("--before")]),v._v("，仅显示指定时间之前的提交。")])]),v._v(" "),i("li",[i("p",[i("code",[v._v("--author")]),v._v("，仅显示作者匹配指定字符串的提交。")])]),v._v(" "),i("li",[i("p",[i("code",[v._v("--committer")]),v._v("，仅显示提交者匹配指定字符串的提交。")])]),v._v(" "),i("li",[i("p",[i("code",[v._v("--grep")]),v._v("，仅显示提交说明中包含指定字符串的提交。")])]),v._v(" "),i("li",[i("p",[i("code",[v._v("-S")]),v._v("，仅显示添加或删除内容匹配指定字符串的提交。")])])]),v._v(" "),i("p",[v._v("例子")]),v._v(" "),i("p",[v._v("查看 Junio Hamano 在 2008 年 10 月其间， 除了合并提交之外的哪一个提交修改了测试文件，可以使用下面的命令：")]),v._v(" "),i("ul",[i("li",[i("code",[v._v('git log --pretty="%h - %s" --author=\'Junio C Hamano\' --since="2008-10-01" \\ --before="2008-11-01" --no-merges -- t/')])])])])]),v._v(" "),i("h3",{attrs:{id:"撤销操作"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#撤销操作"}},[v._v("#")]),v._v(" 撤销操作")]),v._v(" "),i("ul",[i("li",[v._v("重新提交\n"),i("ul",[i("li",[i("code",[v._v("git commit --amend")]),v._v("，修改上一次提交。")]),v._v(" "),i("li",[v._v("例如，提交后发现忘记了暂存某些需要的修改，可以像下面这样操作：\n"),i("ul",[i("li",[i("code",[v._v("git commit -m 'initial commit'")])]),v._v(" "),i("li",[i("code",[v._v("git add forgotten_file")])]),v._v(" "),i("li",[i("code",[v._v("git commit --amend")])])])]),v._v(" "),i("li",[v._v("最终你只会有一个提交，第二次提交将代替第一次提交的结果。")])])]),v._v(" "),i("li",[v._v("取消暂存文件\n"),i("ul",[i("li",[i("code",[v._v("git reset，git reset HEAD <file>...")])])])]),v._v(" "),i("li",[v._v("撤销对文件的修改\n"),i("ul",[i("li",[i("code",[v._v("git checkout -- file...")]),v._v("，本地文件的任何修改都会消失，Git 会用最近提交的版本覆盖掉它。")]),v._v(" "),i("li",[i("code",[v._v("git reset <重置到哪里>")]),v._v(" "),i("ul",[i("li",[v._v("清空暂存区，撤销 add，本地修改还在")]),v._v(" "),i("li",[v._v("参数可以使用相对 "),i("code",[v._v("HEAD~1")]),v._v("，就是说回退上一位置。修改 HEAD 的位置，即将 HEAD 指向的位置改变为之前存在的某个版本。")]),v._v(" "),i("li",[v._v("回退以后会提示没有任何需要提交的，这个时候强制 push，将会清空远程已有的提交。")]),v._v(" "),i("li",[i("code",[v._v("--hard")]),v._v(" "),i("ul",[i("li",[v._v("清空工作目录和暂存区的改动，本地和暂存区全都撤回到那一刻。")])])]),v._v(" "),i("li",[i("code",[v._v("--soft")]),v._v(" "),i("ul",[i("li",[v._v("保留工作目录的内容，并把因为保留工作目录内容所带来的新的文件差异放进暂存区。")]),v._v(" "),i("li",[v._v("移动 HEAD 到指定的 commit 节点，但保留 工作区和暂存区的内容，简单来说就是你的代码还在只是变成了未提交状态或未添加状态")])])])])]),v._v(" "),i("li",[i("code",[v._v("git revert <需要反做的目标>")]),v._v(" "),i("ul",[i("li",[v._v("撤销 commit，在我们要撤销的提交记录后面居然多了一个新提交！这是因为新提交记录 C2' 引入了更改。这些更改刚好是用来撤销 C2 这个提交的。也就是说 C2' 的状态与 C1 是相同的。（顺序：C0 - C1 - C2 - C2'）")])])])])])]),v._v(" "),i("h3",{attrs:{id:"远程仓库的使用"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#远程仓库的使用"}},[v._v("#")]),v._v(" 远程仓库的使用")]),v._v(" "),i("ul",[i("li",[v._v("操作远程仓库\n"),i("ul",[i("li",[i("code",[v._v("origin")]),v._v("，Git 给克隆的仓库（远程）服务器的默认名字。")]),v._v(" "),i("li",[i("code",[v._v("git remote")]),v._v("，不带参数，列出已经存在的远程分支。")]),v._v(" "),i("li",[i("code",[v._v("git remote -v | --verbose")]),v._v("，列出详细信息，在每一个名字后面列出其远程 url，此时，"),i("code",[v._v("-v")]),v._v(" 选项(译注:此为 "),i("code",[v._v("–verbose")]),v._v(" 的简写,取首字母),显示对应的克隆地址。")]),v._v(" "),i("li",[i("code",[v._v("git remote add <shortname> url")]),v._v("，添加一个新的远程 Git 仓库，同时指定一个方便使用的简写。")]),v._v(" "),i("li",[i("code",[v._v("git remote show <remote>")]),v._v("，查看某个仓库。")]),v._v(" "),i("li",[i("code",[v._v("git remote rename <修改前> <修改后name>")]),v._v("，远程仓库的重命名。")]),v._v(" "),i("li",[i("code",[v._v("git remote rm")]),v._v(" 或者是 "),i("code",[v._v("git remote remove")]),v._v("，移除一个远程仓库。一旦你使用这种方式删除了一个远程仓库，那么所有和这个远程仓库相关的远程跟踪分支以及配置信息也会一起被删除。")]),v._v(" "),i("li",[i("code",[v._v("git remote set-url origin xxxxx.git")]),v._v(" 直接修改 url。")]),v._v(" "),i("li",[v._v("先 "),i("code",[v._v("git remote rm origin")]),v._v(" 后 "),i("code",[v._v("git remote add origin xxxxx.git")]),v._v("， 实现修改 url。")])])]),v._v(" "),i("li",[v._v("从远程仓库抓取和拉取\n"),i("ul",[i("li",[i("code",[v._v("git fetch <remote>")]),v._v("，这个命令会访问远程仓库，从中拉取所有你还没有的数据。 执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。\n"),i("ul",[i("li",[i("code",[v._v("git fetch")]),v._v(" 只会将数据下载到你的本地仓库，它并不会自动合并或修改你当前的工作。")]),v._v(" "),i("li",[v._v("当准备好时你必须手动将其合并入你的工作。"),i("code",[v._v("git fetch")]),v._v(" 更新你的远程跟踪分支")])])]),v._v(" "),i("li",[i("code",[v._v("git fetch <remote> <remotebranch>")]),v._v("，拉取指定分支。")]),v._v(" "),i("li",[i("code",[v._v("git fetch <remote> <remotebranch>:<localbranch>")]),v._v("，拉取到本地，指定分支。")]),v._v(" "),i("li",[i("code",[v._v("git pull")]),v._v("，自动抓取后合并该远程分支到当前分支。\n"),i("ul",[i("li",[i("code",[v._v("git pull = git fetch + git merge")])]),v._v(" "),i("li",[v._v("默认情况下，"),i("code",[v._v("git clone")]),v._v(" 命令会自动设置本地 master 分支跟踪克隆的远程仓库的 master 分支（或其它名字的默认分支）。")]),v._v(" "),i("li",[v._v("运行 "),i("code",[v._v("git pull")]),v._v(" 通常会从最初克隆的服务器上抓取数据并自动尝试合并到当前所在的分支。")])])])])]),v._v(" "),i("li",[v._v("推送到远程仓库\n"),i("ul",[i("li",[i("code",[v._v("git push <远程主机名> <本地分支名> <远程分支名>")])]),v._v(" "),i("li",[i("code",[v._v("git push origin master：refs/for/master")]),v._v(" "),i("ul",[i("li",[v._v("将本地的 master 分支推送到远程主机 origin 上的对应 master 分支。\n"),i("ul",[i("li",[v._v("origin 是远程主机名")]),v._v(" "),i("li",[v._v("第一个 master 是本地分支名")]),v._v(" "),i("li",[v._v("第二个 master 是远程分支名")])])])])]),v._v(" "),i("li",[i("code",[v._v("git push origin master")]),v._v(" "),i("ul",[i("li",[v._v("如果远程分支被省略，如上则表示将本地分支推送到与之存在追踪关系的远程分支（通常两者同名）")]),v._v(" "),i("li",[v._v("如果该远程分支不存在，则会被新建。")])])]),v._v(" "),i("li",[i("code",[v._v("git push origin ：refs/for/master")]),v._v(" "),i("ul",[i("li",[v._v("如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支")]),v._v(" "),i("li",[v._v("等同于 "),i("code",[v._v("git push origin --delete master")])])])]),v._v(" "),i("li",[i("code",[v._v("git push origin")]),v._v(" "),i("ul",[i("li",[v._v("如果当前分支与远程分支存在追踪关系，则本地分支和远程分支都可以省略")]),v._v(" "),i("li",[v._v("将当前分支推送到 origin 主机的对应分支")])])]),v._v(" "),i("li",[i("code",[v._v("git push")]),v._v(" "),i("ul",[i("li",[v._v("如果当前分支只有一个远程分支，那么主机名都可以省略")]),v._v(" "),i("li",[v._v("形如 "),i("code",[v._v("git push")]),v._v("，可以使用 "),i("code",[v._v("git branch -r")]),v._v(" ，查看远程的分支名。")])])])])])]),v._v(" "),i("h3",{attrs:{id:"git-标签"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git-标签"}},[v._v("#")]),v._v(" git 标签")]),v._v(" "),i("ul",[i("li",[i("code",[v._v("git tag")]),v._v("，查看（列出）标签。\n"),i("ul",[i("li",[v._v("参数 "),i("code",[v._v("-l")]),v._v(" 或者 "),i("code",[v._v("--list")])]),v._v(" "),i("li",[v._v("可以使用 "),i("code",[v._v("git tag -l 'string'")]),v._v(" 筛选内容。")])])]),v._v(" "),i("li",[v._v("打标签\n"),i("ul",[i("li",[v._v("标签分为：\n"),i("ul",[i("li",[v._v("附注标签")]),v._v(" "),i("li",[v._v("轻量标签")])])]),v._v(" "),i("li",[v._v("默认标签是打在最新提交的commit上的。")]),v._v(" "),i("li",[v._v("轻量标签\n"),i("ul",[i("li",[i("code",[v._v("git tag <tagname>")])])])]),v._v(" "),i("li",[v._v("附注标签\n"),i("ul",[i("li",[i("code",[v._v('git tag -a <tagname> -m "description"')])]),v._v(" "),i("li",[v._v("带有说明的标签：\n"),i("ul",[i("li",[i("code",[v._v("-a")]),v._v(" 指定标签名")]),v._v(" "),i("li",[i("code",[v._v("-m")]),v._v(" 指定说明文字")]),v._v(" "),i("li",[v._v("如果没有为附注标签指定一条信息，Git 会启动编辑器要求你输入信息。")])])])])])])]),v._v(" "),i("li",[i("code",[v._v("git show <tagname>")]),v._v("，查看具体标签信息，命令可以看到标签信息和与之对应的提交信息。")]),v._v(" "),i("li",[i("code",[v._v("git tag <tagname> <commit id>")]),v._v(" "),i("ul",[i("li",[v._v("给历史提交打标签。")])])]),v._v(" "),i("li",[i("code",[v._v("git push <远程主机名> <tagname>")]),v._v(" "),i("ul",[i("li",[v._v("推送某个标签")])])]),v._v(" "),i("li",[i("code",[v._v("git push origin --tags")]),v._v(" "),i("ul",[i("li",[v._v("推送所有标签到远程。")])])]),v._v(" "),i("li",[v._v("删除标签\n"),i("ul",[i("li",[i("code",[v._v("git tag -d <tagname>")]),v._v("，这只会删除本地的标签。")]),v._v(" "),i("li",[v._v("如果要删除远程的标签的话\n"),i("ul",[i("li",[i("code",[v._v("git push origin --delete <tagname>")])])])])])]),v._v(" "),i("li",[v._v("检出标签\n"),i("ul",[i("li",[i("code",[v._v("git checkout <tagname>")])])])])]),v._v(" "),i("h3",{attrs:{id:"设置-git-别名"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#设置-git-别名"}},[v._v("#")]),v._v(" 设置 git 别名")]),v._v(" "),i("ul",[i("li",[i("code",[v._v("git config --global alias.co checkout")])]),v._v(" "),i("li",[i("code",[v._v("git config --global alias.br branch")])]),v._v(" "),i("li",[i("code",[v._v("git config --global alias.ci commit")])]),v._v(" "),i("li",[i("code",[v._v("git config --global alias.st status")])])]),v._v(" "),i("h2",{attrs:{id:"分支"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#分支"}},[v._v("#")]),v._v(" 分支")]),v._v(" "),i("ul",[i("li",[v._v("查看分支列表\n"),i("ul",[i("li",[i("code",[v._v("git branch")]),v._v("\n看每一个分支的最后一次提交\n"),i("ul",[i("li",[i("code",[v._v("git branch -v")]),v._v("\n查看已经/没有合并到当前分支的分支列表")]),v._v(" "),i("li",[i("code",[v._v("--merged")])]),v._v(" "),i("li",[i("code",[v._v("--no-merged")])]),v._v(" "),i("li",[v._v("可以指定当前分支的分支名\n"),i("ul",[i("li",[i("code",[v._v("git branch --merged <currentbranch>")])])])])])])])]),v._v(" "),i("li",[v._v("创建分支\n"),i("ul",[i("li",[i("code",[v._v("git branch branchname")])])])]),v._v(" "),i("li",[v._v("切换分支\n"),i("ul",[i("li",[i("code",[v._v("git checkout branch")])])])]),v._v(" "),i("li",[v._v("重命名分支\n"),i("ul",[i("li",[i("code",[v._v("git branch -m oldName newName")])])])]),v._v(" "),i("li",[v._v("创建同时切换到新分支\n"),i("ul",[i("li",[i("code",[v._v("git checkout -b <localnewbranchname> <remotebranchname>")])]),v._v(" "),i("li",[i("code",[v._v("git checkout --track origin/dev")]),v._v(" 等同于 "),i("code",[v._v("git checkout -b dev origin/dev")])])])]),v._v(" "),i("li",[v._v("删除分支\n"),i("ul",[i("li",[i("code",[v._v("git branch -d branchname")])]),v._v(" "),i("li",[i("code",[v._v("-D")]),v._v(" 强制删除。")])])]),v._v(" "),i("li",[v._v("删除远程分支\n"),i("ul",[i("li",[i("code",[v._v("git push origin --delete branchname")])]),v._v(" "),i("li",[v._v("基本上这个命令做的只是从服务器上移除这个指针。Git 服务器通常会保留数据一段时间直到垃圾回收运行，所以如果不小心删除掉了，通常是很容易恢复的。")])])]),v._v(" "),i("li",[v._v("合并时遇到冲突，解决冲突文件以后，一旦暂存这些原本有冲突的文件，Git 就会将它们标记为冲突已解决。")]),v._v(" "),i("li",[v._v("查看远程分支\n"),i("ul",[i("li",[v._v("注意与 "),i("code",[v._v("git remote")]),v._v(" 查看远程仓库不同")]),v._v(" "),i("li",[i("code",[v._v("git ls-remote <远程主机>")]),v._v("，简单列表")]),v._v(" "),i("li",[i("code",[v._v("git remote show <远程主机名>")]),v._v(",更多信息。")])])]),v._v(" "),i("li",[v._v("跟踪分支\n"),i("ul",[i("li",[i("p",[v._v("查看所有跟踪分支")]),v._v(" "),i("ul",[i("li",[i("code",[v._v("git branch -vv")]),v._v("，\n"),i("ul",[i("li",[v._v("“ahead” 是 2，意味着本地有两个提交还没有推送到服务器上。")])])])])]),v._v(" "),i("li",[i("p",[v._v("修改正在跟踪的远程分支")]),v._v(" "),i("ul",[i("li",[i("code",[v._v("git branch -u <远程分支> <本地分支>")])]),v._v(" "),i("li",[i("code",[v._v("-u")]),v._v(" 等同于 "),i("code",[v._v("--set-upstream-to")])])])]),v._v(" "),i("li",[i("p",[v._v("设置好跟踪分支后，可以通过简写 "),i("code",[v._v("@{upstream}")]),v._v(" 或 "),i("code",[v._v("@{u}")]),v._v(" 来引用它的上游分支。")]),v._v(" "),i("p",[v._v("比如：")]),v._v(" "),i("ul",[i("li",[v._v("在 master 分支时并且它正在跟踪 origin/master 时，如果愿意的话可以使用 "),i("code",[v._v("git merge @{u}")]),v._v(" 来取代 "),i("code",[v._v("git merge origin/master")]),v._v("。")]),v._v(" "),i("li",[v._v("需要重点注意的一点是这些数字的值来自于你从每个服务器上最后一次抓取的数据。 这个命令并没有连接服务器，它只会告诉你关于本地缓存的服务器数据。")]),v._v(" "),i("li",[v._v("如果想要统计最新的领先与落后数字，需要在运行此命令前抓取所有的远程仓库。\n"),i("ul",[i("li",[i("code",[v._v("git fetch --all; git branch -vv")])])])])])])])]),v._v(" "),i("li",[v._v("变基\n"),i("ul",[i("li",[v._v("只对尚未推送或分享给别人的本地修改执行变基操作清理历史。")]),v._v(" "),i("li",[v._v("不要对已推送至别处的提交执行变基操作。")])])])]),v._v(" "),i("h2",{attrs:{id:"协议"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#协议"}},[v._v("#")]),v._v(" 协议")]),v._v(" "),i("ul",[i("li",[v._v("本地协议（Local）,通常使用普通路径，因为这样更快。\n"),i("ul",[i("li",[v._v("指定路径\n"),i("ul",[i("li",[i("code",[v._v("git clone /srv/git/project.git")])]),v._v(" "),i("li",[v._v("Git 会尝试使用硬链接（hard link）或直接复制所需要的文件。")])])]),v._v(" "),i("li",[v._v("指定 "),i("code",[v._v("file://")]),v._v(" "),i("ul",[i("li",[i("code",[v._v("git clone file:///srv/git/project.git")])]),v._v(" "),i("li",[v._v("Git 会触发平时用于网路传输资料的进程，那样传输效率会更低。")]),v._v(" "),i("li",[v._v("指定 "),i("code",[v._v("file://")]),v._v(" 的主要目的是取得一个没有外部参考（extraneous references） 或对象（object）的干净版本库副本——通常是在从其他版本控制系统导入后或一些类似情况需要这么做。。")])])])])]),v._v(" "),i("li",[v._v("HTTP 协议\n"),i("ul",[i("li",[v._v("需要用户名密码。")])])]),v._v(" "),i("li",[v._v("SSH 协议\n"),i("ul",[i("li",[v._v("需要配置 ssh key，配置以后就不需要再输入用户名密码了。")]),v._v(" "),i("li",[v._v("不支持匿名访问。")])])]),v._v(" "),i("li",[v._v("Git 协议\n"),i("ul",[i("li",[v._v("Git 协议是 Git 使用的网络传输协议里最快的。")])])])]),v._v(" "),i("h2",{attrs:{id:"ssh-公钥"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#ssh-公钥"}},[v._v("#")]),v._v(" SSH 公钥")]),v._v(" "),i("ul",[i("li",[v._v("生成\n"),i("ul",[i("li",[i("code",[v._v("ssh-keygen")])]),v._v(" "),i("li",[v._v("默认情况下，用户的 SSH 密钥存储在其 "),i("code",[v._v("~/.ssh")]),v._v(" 目录下。")]),v._v(" "),i("li",[v._v("一对以 "),i("code",[v._v("id_dsa")]),v._v(" 或 "),i("code",[v._v("id_rsa")]),v._v(" 命名的文件，其中一个带有 "),i("code",[v._v(".pub")]),v._v(" 扩展名的，将公钥添加到 git 服务器以实现 SSH 方式登录。")])])]),v._v(" "),i("li",[v._v("使用上\n"),i("ul",[i("li",[i("p",[v._v("要做到每次提交都有具体的主题，比如每次提交都解决了一个问题，不要将处理的几个问题在一次提交中，提交上去。")])]),v._v(" "),i("li",[i("p",[v._v("提交信息")]),v._v(" "),i("ul",[i("li",[v._v("少于 25 汉字，或者 50 字符的简要概括，然后空一行，再接着继续更详细的解释。")])]),v._v(" "),i("div",{staticClass:"language-bash line-numbers-mode"},[i("pre",{pre:!0,attrs:{class:"language-bash"}},[i("code",[v._v("1edee6b"),i("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("..")]),v._v("fbff5bc  master -"),i("span",{pre:!0,attrs:{class:"token operator"}},[v._v(">")]),v._v(" master\n"),i("span",{pre:!0,attrs:{class:"token operator"}},[v._v("<")]),v._v("oldref"),i("span",{pre:!0,attrs:{class:"token operator"}},[v._v(">")]),i("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("..")]),i("span",{pre:!0,attrs:{class:"token operator"}},[v._v("<")]),v._v("newref"),i("span",{pre:!0,attrs:{class:"token operator"}},[v._v(">")]),v._v(" fromref -"),i("span",{pre:!0,attrs:{class:"token operator"}},[v._v(">")]),v._v(" toref\n")])]),v._v(" "),i("div",{staticClass:"line-numbers-wrapper"},[i("span",{staticClass:"line-number"},[v._v("1")]),i("br"),i("span",{staticClass:"line-number"},[v._v("2")]),i("br")])]),i("ul",[i("li",[v._v("oldref 的含义是推送前所指向的引用")]),v._v(" "),i("li",[v._v("newref 的含义是推送后所指向的引用")]),v._v(" "),i("li",[v._v("fromref 是将要被推送的本地引用的名字")]),v._v(" "),i("li",[v._v("toref 是将要被更新的远程引用的名字")])])])])])]),v._v(" "),i("h2",{attrs:{id:"gitkeep-文件"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#gitkeep-文件"}},[v._v("#")]),v._v(" .gitkeep 文件")]),v._v(" "),i("ul",[i("li",[v._v("git 默认是不允许提交一个空的目录到版本库上的, 可以在空的文件夹里面建立一个 "),i("code",[v._v(".gitkeep")]),v._v(" 文件，然后提交去即可。")]),v._v(" "),i("li",[v._v("其实在 git 中 "),i("code",[v._v(".gitkeep")]),v._v(" 就是一个占位符。")])]),v._v(" "),i("h2",{attrs:{id:"配置"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[v._v("#")]),v._v(" 配置")]),v._v(" "),i("ul",[i("li",[v._v("配置文件优先级："),i("code",[v._v(".git/config")]),v._v(" > "),i("code",[v._v("~/.gitconfig")]),v._v(" > "),i("code",[v._v("/etc/gitconfig")])]),v._v(" "),i("li",[v._v("检查配置信息\n"),i("ul",[i("li",[v._v("如果想要检查你的配置，可以使用 "),i("code",[v._v("git config --list")]),v._v(" 命令来列出所有 Git 当时能找到的配置。")])])]),v._v(" "),i("li",[v._v("安装完 Git 之后，要做的第一件事就是设置你的用户名和邮件地址。\n"),i("ul",[i("li",[v._v("这一点很重要，因为每一个 Git 提交都会使用这些信息，它们会写入到你的每一次提交中，不可更改：\n"),i("ul",[i("li",[i("code",[v._v('git config --global user.name "John Doe"')])]),v._v(" "),i("li",[i("code",[v._v("git config --global user.email johndoe@example.com")])])])])])]),v._v(" "),i("li",[i("strong",[v._v("再次强调")]),v._v("，如果使用了 "),i("code",[v._v("--global")]),v._v(" 选项，那么该命令只需要运行一次，因为之后无论你在该系统上做任何事情， Git 都会使用那些信息。 当你想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行没有 "),i("code",[v._v("--global")]),v._v(" 选项的命令来配置。很多 GUI 工具都会在第一次运行时帮助你配置这些信息。")]),v._v(" "),i("li",[v._v("常用配置项：\n"),i("ul",[i("li",[i("code",[v._v('git config --global user.name "John Doe"')]),v._v(" # 换成自己的名字")]),v._v(" "),i("li",[i("code",[v._v("git config --global user.email johndoe@example.com")]),v._v(" # 换成自己的邮箱")]),v._v(" "),i("li",[i("code",[v._v("git config --global core.editor vim")])]),v._v(" "),i("li",[i("code",[v._v("git config --global core.quotepath false")])]),v._v(" "),i("li",[i("code",[v._v("git config --global push.default simple")])]),v._v(" "),i("li",[i("code",[v._v("git config --global rerere.enabled true")])]),v._v(" "),i("li",[i("code",[v._v("git config --global alias.c checkout")])]),v._v(" "),i("li",[i("code",[v._v("git config --global alias.d diff")])]),v._v(" "),i("li",[i("code",[v._v('git config --global alias.dc "diff --cached"')])]),v._v(" "),i("li",[i("code",[v._v('git config --global alias.dw "diff --word-diff"')])]),v._v(" "),i("li",[i("code",[v._v("git config --global alias.l \"log --all --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative\"")])]),v._v(" "),i("li",[i("code",[v._v("git config --global alias.s status -sb")])]),v._v(" "),i("li",[i("code",[v._v("git config --global alias.reset-permission '!git diff -p -R --no-color | grep -E \"^(diff|(old|new) mode)\" --color=never | git apply'")])])])])]),v._v(" "),i("h2",{attrs:{id:"讨论区"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#讨论区"}},[v._v("#")]),v._v(" 讨论区")]),v._v(" "),i("blockquote",[i("p",[v._v("由于评论过多会影响页面最下方的导航，故将评论区做默认折叠处理。")])]),v._v(" "),i("details",{staticClass:"custom-block details"},[i("summary",[v._v("点击查看评论区内容，渴望您的宝贵建议~")]),v._v(" "),i("Vssue",{attrs:{title:v.$title,options:{locale:"zh"}}})],1)])}),[],!1,null,null,null);_.default=l.exports}}]);